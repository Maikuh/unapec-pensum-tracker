{"version":3,"sources":["components/SearchBox.tsx","components/CuatriTable.tsx","components/InfoCard.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["SearchBox","props","onCarreerSelect","carreer","localStorage","setItem","JSON","stringify","selectCarreer","pensumCode","useEffect","selectedCarreer","lastSelectedCarreer","getItem","parse","Grid","className","container","direction","justify","alignItems","item","length","Autocomplete","id","autoComplete","autoHighlight","options","pensums","getOptionLabel","c","carreerName","value","find","p","style","width","onChange","e","renderInput","params","TextField","label","variant","CuatriTable","useState","period","setPeriod","selected","setSelected","selectSubject","row","prereqMet","subjectSelected","alert","prerequisites","every","includes","creditsCount","totalCredits","Number","slice","map","s","code","getSubjectNameFromPrereq","prereq","subject","cuatris","cuatri","subjects","flat","name","selectedSubjects","HtmlTooltip","withStyles","theme","tooltip","backgroundColor","color","border","Tooltip","TableContainer","component","Paper","Toolbar","Typography","flex","Table","aria-label","TableHead","TableRow","TableCell","align","TableBody","hover","key","onClick","some","padding","Checkbox","checked","disabled","scope","credits","pr","title","InfoCard","alignContent","xs","md","Card","CardContent","gutterBottom","List","ListItem","ListItemAvatar","Avatar","ListItemText","primary","secondary","subjectsCount","totalSubjects","savedSelectedSubjects","defaultSelectedSubjects","console","log","Object","keys","pensum","App","setSelectedCarreer","setSelectedSubjects","fileInputRef","createRef","darkTheme","createMuiTheme","palette","type","classes","makeStyles","root","flexGrow","menuButton","marginRight","spacing","toolbar","minHeight","paddingTop","paddingBottom","alignSelf","sectionRight","useStyles","onSubjectSelected","temp","ss","filter","concat","HideOnScroll","children","window","trigger","useScrollTrigger","target","undefined","Slide","appear","in","Fragment","ThemeProvider","CssBaseline","AppBar","IconButton","href","fontSize","dataStr","dataUri","encodeURIComponent","linkElement","document","createElement","setAttribute","click","setTimeout","remove","exportToJsonFile","current","ref","display","uploadedFile","files","reader","FileReader","onload","event","fileContents","result","readAsText","importFromJsonFile","Container","fixed","reduce","acc","acc2","sub","i","Divider","marginBottom","marginTop","Link","Boolean","location","hostname","match","ReactDOM","render","StrictMode","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.8b44e269.chunk.js","sourcesContent":["import React, { useEffect } from \"react\";\r\nimport { Grid, TextField } from \"@material-ui/core\";\r\nimport { Autocomplete } from \"@material-ui/lab\";\r\n\r\nexport const SearchBox = (props: any) => {\r\n    useEffect(() => {\r\n        if (!props.selectedCarreer.pensumCode) {\r\n            const lastSelectedCarreer = localStorage.getItem(\r\n                \"lastSelectedCarreer\"\r\n            );\r\n\r\n            if (lastSelectedCarreer)\r\n                onCarreerSelect(JSON.parse(lastSelectedCarreer));\r\n        }\r\n    });\r\n\r\n    function onCarreerSelect(carreer: any) {\r\n        localStorage.setItem(\"lastSelectedCarreer\", JSON.stringify(carreer));\r\n        props.selectCarreer(carreer.pensumCode);\r\n    }\r\n\r\n    return (\r\n        <Grid\r\n            className=\"search-box\"\r\n            container\r\n            direction=\"row\"\r\n            justify=\"center\"\r\n            alignItems=\"center\"\r\n        >\r\n            <Grid item>\r\n                {props.selectedCarreer &&\r\n                props.selectedCarreer.pensumCode &&\r\n                props.selectedCarreer.pensumCode.length > 0 ? (\r\n                    <Autocomplete\r\n                        id=\"carreer-search-box\"\r\n                        autoComplete\r\n                        autoHighlight\r\n                        options={props.pensums}\r\n                        getOptionLabel={(c: any) =>\r\n                            `${c.pensumCode} - ${c.carreerName}`\r\n                        }\r\n                        value={props.pensums.find(\r\n                            (p: any) =>\r\n                                p.pensumCode ===\r\n                                props.selectedCarreer.pensumCode\r\n                        )}\r\n                        style={{ width: 600 }}\r\n                        onChange={(e: any, value: any) =>\r\n                            onCarreerSelect(value)\r\n                        }\r\n                        renderInput={(params) => (\r\n                            <TextField\r\n                                {...params}\r\n                                label=\"Elegir Carrera\"\r\n                                variant=\"outlined\"\r\n                            />\r\n                        )}\r\n                    />\r\n                ) : (\r\n                    <Autocomplete\r\n                        id=\"carreer-search-box\"\r\n                        autoComplete\r\n                        autoHighlight\r\n                        options={props.pensums}\r\n                        getOptionLabel={(c: any) =>\r\n                            `${c.pensumCode} - ${c.carreerName}`\r\n                        }\r\n                        style={{ width: 600 }}\r\n                        onChange={(e: any, value: any) =>\r\n                            onCarreerSelect(value)\r\n                        }\r\n                        renderInput={(params) => (\r\n                            <TextField\r\n                                {...params}\r\n                                label=\"Elegir Carrera\"\r\n                                variant=\"outlined\"\r\n                            />\r\n                        )}\r\n                    />\r\n                )}\r\n            </Grid>\r\n        </Grid>\r\n    );\r\n};\r\n","import React, { useEffect, useState } from \"react\";\r\nimport {\r\n    TableContainer,\r\n    Paper,\r\n    Table,\r\n    TableHead,\r\n    TableRow,\r\n    TableCell,\r\n    TableBody,\r\n    Typography,\r\n    Toolbar,\r\n    Checkbox,\r\n    Tooltip,\r\n    withStyles,\r\n    Theme,\r\n} from \"@material-ui/core\";\r\n\r\nexport const CuatriTable = (props: any) => {\r\n    const [period, setPeriod] = useState(0);\r\n    const [selected, setSelected]: any = useState([]);\r\n\r\n    useEffect(() => {\r\n        setPeriod(props.cuatri.period);\r\n        setSelected(props.selectedSubjects);\r\n    }, [props.cuatri, props.selectedSubjects, period, selected]);\r\n\r\n    function selectSubject(row: any) {\r\n        if (prereqMet(row)) props.subjectSelected(row);\r\n        else\r\n            alert(\r\n                \"No tienes los prerequisitos completados para seleccionar esta materia.\"\r\n            );\r\n    }\r\n\r\n    function prereqMet(row: any) {\r\n        let isMet: boolean =\r\n            row.prerequisites.length === 0\r\n                ? true\r\n                : row.prerequisites.every((p: string) =>\r\n                      p.includes(\"%\")\r\n                          ? (props.creditsCount / props.totalCredits) * 100 >=\r\n                            Number(p.slice(0, 2))\r\n                          : selected[props.pensumCode]\r\n                                .map((s: any) => s.code)\r\n                                .includes(p)\r\n                  );\r\n\r\n        return isMet;\r\n    }\r\n\r\n    function getSubjectNameFromPrereq(prereq: string) {\r\n        const subject = props.cuatris\r\n            .map((cuatri: any) => cuatri.subjects)\r\n            .flat()\r\n            .find((subject: any) => subject.code === prereq);\r\n\r\n        return subject ? subject.name : \"\";\r\n    }\r\n\r\n    const HtmlTooltip = withStyles((theme: Theme) => ({\r\n        tooltip: {\r\n            backgroundColor: \"rgba(245, 0, 87, 0.76)\",\r\n            color: \"#fafafa\",\r\n            border: \"1px solid rgba(245, 0, 87, 0.76)\",\r\n        },\r\n    }))(Tooltip);\r\n\r\n    return (\r\n        <TableContainer component={Paper}>\r\n            <Toolbar>\r\n                <Typography\r\n                    style={{ flex: \"1 1 100%\" }}\r\n                    variant=\"h6\"\r\n                    id=\"tableTitle\"\r\n                    component=\"div\"\r\n                >\r\n                    Cuatrimestre {period}\r\n                </Typography>\r\n            </Toolbar>\r\n            <Table aria-label=\"simple table\">\r\n                <TableHead>\r\n                    <TableRow>\r\n                        {/* <TableCell padding=\"checkbox\">\r\n                            <Checkbox\r\n                                indeterminate={\r\n                                    selected.length > 0 &&\r\n                                    selected.length < props.cuatri.subjects\r\n                                }\r\n                                checked={\r\n                                    props.cuatri.subjects > 0 &&\r\n                                    selected.length === props.cuatri.subjects\r\n                                }\r\n                                // onChange={onSelectAllClick}\r\n                                inputProps={{\r\n                                    \"aria-label\": \"select all subjects\",\r\n                                }}\r\n                            />\r\n                        </TableCell> */}\r\n                        <TableCell></TableCell>\r\n                        <TableCell>Código</TableCell>\r\n                        <TableCell align=\"right\">Nombre</TableCell>\r\n                        <TableCell align=\"right\">Créditos</TableCell>\r\n                        <TableCell align=\"right\">Pre-requisitos</TableCell>\r\n                    </TableRow>\r\n                </TableHead>\r\n                <TableBody>\r\n                    {selected[props.pensumCode] &&\r\n                        props.cuatri.subjects.map((row: any) => (\r\n                            <TableRow\r\n                                hover\r\n                                key={row.code}\r\n                                onClick={() => selectSubject(row)}\r\n                                className={\r\n                                    !prereqMet(row) ? \"disabled-row\" : \"\"\r\n                                }\r\n                                selected={selected[props.pensumCode].some(\r\n                                    (s: any) => s.code === row.code\r\n                                )}\r\n                            >\r\n                                <TableCell padding=\"checkbox\">\r\n                                    <Checkbox\r\n                                        checked={selected[\r\n                                            props.pensumCode\r\n                                        ].some((s: any) => s.code === row.code)}\r\n                                        onChange={(e) => selectSubject(row)}\r\n                                        disabled={!prereqMet(row)}\r\n                                    />\r\n                                </TableCell>\r\n                                <TableCell component=\"th\" scope=\"row\">\r\n                                    {row.code}\r\n                                </TableCell>\r\n                                <TableCell align=\"right\">{row.name}</TableCell>\r\n                                <TableCell align=\"right\">\r\n                                    {row.credits}\r\n                                </TableCell>\r\n                                <TableCell align=\"right\">\r\n                                    {row.prerequisites.map((pr: any) =>\r\n                                        pr.includes(\"%\") ? (\r\n                                            <p key={row.code + pr}>{pr}</p>\r\n                                        ) : (\r\n                                            <HtmlTooltip\r\n                                                className=\"prerequisite-tooltip\"\r\n                                                key={row.code + pr}\r\n                                                title={\r\n                                                    <Typography\r\n                                                        variant=\"h6\"\r\n                                                        className=\"prerequisite-tooltip-content\"\r\n                                                    >\r\n                                                        {getSubjectNameFromPrereq(\r\n                                                            pr\r\n                                                        )}\r\n                                                    </Typography>\r\n                                                }\r\n                                            >\r\n                                                <p>{pr}</p>\r\n                                            </HtmlTooltip>\r\n                                        )\r\n                                    )}\r\n                                </TableCell>\r\n                            </TableRow>\r\n                        ))}\r\n                </TableBody>\r\n            </Table>\r\n        </TableContainer>\r\n    );\r\n};\r\n","import React from \"react\";\r\nimport {\r\n    List,\r\n    ListItem,\r\n    ListItemAvatar,\r\n    Avatar,\r\n    ListItemText,\r\n    Grid,\r\n    Typography,\r\n    Card,\r\n    CardContent,\r\n} from \"@material-ui/core\";\r\nimport {\r\n    FileDocumentOutline as FileDocumentIcon,\r\n    CreditCardOutline as CreditIcon,\r\n} from \"mdi-material-ui\";\r\n\r\nexport const InfoCard = (props: any) => {\r\n    return (\r\n        <Grid\r\n            container\r\n            justify=\"center\"\r\n            alignContent=\"center\"\r\n            alignItems=\"center\"\r\n            className=\"info-card\"\r\n        >\r\n            <Grid item xs={12} md={6}>\r\n                <Card>\r\n                    <CardContent>\r\n                        <Typography gutterBottom variant=\"h5\" component=\"h2\">\r\n                            Informacion\r\n                        </Typography>\r\n\r\n                        <List>\r\n                            <ListItem>\r\n                                <ListItemAvatar>\r\n                                    <Avatar>\r\n                                        <FileDocumentIcon />\r\n                                    </Avatar>\r\n                                </ListItemAvatar>\r\n                                <ListItemText\r\n                                    primary=\"Materias\"\r\n                                    secondary={`${props.subjectsCount} / ${props.totalSubjects}`}\r\n                                />\r\n                            </ListItem>\r\n                            <ListItem>\r\n                                <ListItemAvatar>\r\n                                    <Avatar>\r\n                                        <CreditIcon />\r\n                                    </Avatar>\r\n                                </ListItemAvatar>\r\n                                <ListItemText\r\n                                    primary=\"Creditos\"\r\n                                    secondary={`${props.creditsCount} / ${props.totalCredits}`}\r\n                                />\r\n                            </ListItem>\r\n\r\n                            {/* <ListItem>\r\n                                <ListItemAvatar>\r\n                                    <Avatar>\r\n                                        <Icon>beach_access</Icon>\r\n                                    </Avatar>\r\n                                </ListItemAvatar>\r\n                                <ListItemText\r\n                                    primary=\"Vacation\"\r\n                                    secondary=\"July 20, 2014\"\r\n                                />\r\n                            </ListItem> */}\r\n                        </List>\r\n                    </CardContent>\r\n                </Card>\r\n            </Grid>\r\n        </Grid>\r\n    );\r\n};\r\n","import React, { useState, useEffect, createRef, ChangeEvent } from \"react\";\nimport {\n    Container,\n    Grid,\n    createMuiTheme,\n    ThemeProvider,\n    Slide,\n    useScrollTrigger,\n    AppBar,\n    Toolbar,\n    Typography,\n    CssBaseline,\n    makeStyles,\n    IconButton,\n    Divider,\n    Link,\n    Tooltip,\n} from \"@material-ui/core\";\nimport \"./App.css\";\nimport { SearchBox } from \"./components/SearchBox\";\nimport pensums from \"./pensums.json\";\nimport { CuatriTable } from \"./components/CuatriTable\";\nimport { InfoCard } from \"./components/InfoCard\";\nimport {\n    Github as GithubIcon,\n    Gitlab as GitlabIcon,\n    Download as DownloadIcon,\n    Upload as UploadIcon,\n} from \"mdi-material-ui\";\n\nconst savedSelectedSubjects = localStorage.getItem(\"selectedSubjects\");\nconst defaultSelectedSubjects: any = savedSelectedSubjects\n    ? JSON.parse(savedSelectedSubjects)\n    : {};\n\nconsole.log(\"defaultSelectedSubjects\", defaultSelectedSubjects);\n\nif (Object.keys(defaultSelectedSubjects).length === 0) {\n    for (const pensum of pensums) {\n        defaultSelectedSubjects[pensum.pensumCode] = [];\n    }\n}\n\nfunction App() {\n    const [selectedCarreer, setSelectedCarreer]: any[] = useState({});\n    const [selectedSubjects, setSelectedSubjects]: any = useState(\n        defaultSelectedSubjects\n    );\n    const fileInputRef = createRef<HTMLInputElement>();\n\n    const darkTheme = createMuiTheme({\n        palette: {\n            type: \"dark\",\n        },\n    });\n\n    const useStyles = makeStyles((theme) => ({\n        root: {\n            flexGrow: 1,\n        },\n        menuButton: {\n            marginRight: theme.spacing(2),\n        },\n        toolbar: {\n            minHeight: 128,\n            alignItems: \"flex-start\",\n            paddingTop: theme.spacing(1),\n            paddingBottom: theme.spacing(1),\n        },\n        title: {\n            flexGrow: 1,\n            alignSelf: \"center\",\n        },\n        sectionRight: {\n            alignSelf: \"center\",\n        },\n    }));\n\n    const classes = useStyles();\n\n    function onCarreerSelect(pensumCode: string) {\n        setSelectedCarreer(pensums.find((p) => p.pensumCode === pensumCode));\n    }\n\n    function onSubjectSelected(subject: any) {\n        const temp = selectedSubjects[selectedCarreer.pensumCode].some(\n            (ss: any) => ss.code === subject.code\n        )\n            ? selectedSubjects[selectedCarreer.pensumCode].filter(\n                  (s: any) => s.code !== subject.code\n              )\n            : selectedSubjects[selectedCarreer.pensumCode].concat(subject);\n\n        setSelectedSubjects({\n            ...selectedSubjects,\n            [selectedCarreer.pensumCode]: temp,\n        });\n    }\n\n    function HideOnScroll(props: any) {\n        const { children, window } = props;\n        const trigger = useScrollTrigger({\n            target: window ? window() : undefined,\n        });\n\n        return (\n            <Slide appear={false} direction=\"down\" in={!trigger}>\n                {children}\n            </Slide>\n        );\n    }\n\n    function exportToJsonFile() {\n        let dataStr = JSON.stringify(selectedSubjects);\n        let dataUri =\n            \"data:application/json;charset=utf-8,\" +\n            encodeURIComponent(dataStr);\n\n        let exportFileDefaultName = \"uptracker.json\";\n\n        let linkElement = document.createElement(\"a\");\n        linkElement.setAttribute(\"href\", dataUri);\n        linkElement.setAttribute(\"download\", exportFileDefaultName);\n        linkElement.click();\n\n        setTimeout(() => {\n            linkElement.remove();\n            console.log(\"anchor removed\");\n        }, 5000);\n    }\n\n    function clickImportFromJsonInput() {\n        if (fileInputRef && fileInputRef.current) {\n            fileInputRef.current.click();\n        }\n    }\n\n    function importFromJsonFile(e: ChangeEvent<HTMLInputElement>) {\n        const uploadedFile =\n            e.target &&\n            e.target.files &&\n            e.target.files.length > 0 &&\n            e.target.files[0];\n\n        if (uploadedFile && uploadedFile.type === \"application/json\") {\n            const reader = new FileReader();\n\n            reader.onload = (event: any) => {\n                const fileContents = event.target.result;\n                localStorage.setItem(\"selectedSubjects\", fileContents);\n                setSelectedSubjects(JSON.parse(fileContents));\n            };\n\n            reader.readAsText(uploadedFile);\n        } else {\n            alert(\"Por favor seleccione un archivo valido\");\n        }\n    }\n\n    useEffect(() => {\n        localStorage.setItem(\n            \"selectedSubjects\",\n            JSON.stringify(selectedSubjects)\n        );\n        console.log(\"selectedSubjects\", selectedSubjects);\n        console.log(\"selectedCarreer\", selectedCarreer);\n    }, [selectedCarreer, selectedSubjects]);\n\n    return (\n        <React.Fragment>\n            <ThemeProvider theme={darkTheme}>\n                <CssBaseline />\n                <HideOnScroll>\n                    <AppBar color=\"default\">\n                        <Toolbar className={classes.toolbar}>\n                            <Typography className={classes.title} variant=\"h5\">\n                                UNAPEC Pensum Tracker\n                            </Typography>\n\n                            <SearchBox\n                                pensums={pensums.map((p: any) => {\n                                    const { subjects, ...rest } = p;\n                                    return rest;\n                                })}\n                                selectedCarreer={selectedCarreer}\n                                selectCarreer={onCarreerSelect}\n                            />\n\n                            <div className={classes.root}></div>\n\n                            <div className={classes.sectionRight}>\n                                <IconButton\n                                    href=\"https://github.com/maikuh/unapec-pensum-tracker\"\n                                    target=\"_blank\"\n                                >\n                                    <GithubIcon style={{ fontSize: 32 }} />\n                                </IconButton>\n\n                                <IconButton\n                                    href=\"https://gitlab.com/maikuh/unapec-pensum-tracker\"\n                                    target=\"_blank\"\n                                >\n                                    <GitlabIcon style={{ fontSize: 32 }} />\n                                </IconButton>\n\n                                <Tooltip title=\"Exportar datos a archivo\">\n                                    <IconButton\n                                        onClick={() => exportToJsonFile()}\n                                    >\n                                        <DownloadIcon />\n                                    </IconButton>\n                                </Tooltip>\n\n                                <Tooltip title=\"Importar datos de archivo\">\n                                    <IconButton\n                                        onClick={() =>\n                                            clickImportFromJsonInput()\n                                        }\n                                    >\n                                        <UploadIcon />\n                                    </IconButton>\n                                </Tooltip>\n\n                                <input\n                                    type=\"file\"\n                                    ref={fileInputRef}\n                                    style={{ display: \"none\" }}\n                                    onChange={(e) => importFromJsonFile(e)}\n                                />\n                            </div>\n                        </Toolbar>\n                    </AppBar>\n                </HideOnScroll>\n                <Toolbar />\n                <Container fixed className=\"App\">\n                    {selectedCarreer &&\n                    selectedCarreer.cuatris &&\n                    selectedCarreer.cuatris.length > 0 ? (\n                        <InfoCard\n                            subjectsCount={\n                                selectedSubjects[selectedCarreer.pensumCode]\n                                    .length\n                            }\n                            totalSubjects={selectedCarreer.cuatris.reduce(\n                                (acc: number, item: any) =>\n                                    acc + item.subjects.length,\n                                0\n                            )}\n                            creditsCount={selectedSubjects[\n                                selectedCarreer.pensumCode\n                            ].reduce(\n                                (acc: number, item: any) => acc + item.credits,\n                                0\n                            )}\n                            totalCredits={selectedCarreer.cuatris.reduce(\n                                (acc: number, cuatri: any) =>\n                                    acc +\n                                    cuatri.subjects.reduce(\n                                        (acc2: any, sub: any) =>\n                                            acc2 + sub.credits,\n                                        0\n                                    ),\n                                0\n                            )}\n                        />\n                    ) : (\n                        <Typography variant=\"h1\" className=\"main-title\">\n                            Selecciona una carrera del dropdown arriba\n                        </Typography>\n                    )}\n\n                    <Grid container spacing={2} style={{ flexGrow: 1 }}>\n                        {selectedCarreer &&\n                            selectedCarreer.cuatris &&\n                            selectedCarreer.cuatris.length > 0 &&\n                            selectedCarreer.cuatris.map((c: any, i: number) => (\n                                <Grid item xs={6} key={c.period}>\n                                    <CuatriTable\n                                        cuatri={c}\n                                        cuatris={selectedCarreer.cuatris}\n                                        pensumCode={selectedCarreer.pensumCode}\n                                        selectedSubjects={selectedSubjects}\n                                        subjectSelected={onSubjectSelected}\n                                        creditsCount={selectedSubjects[\n                                            selectedCarreer.pensumCode\n                                        ].reduce(\n                                            (acc: number, item: any) =>\n                                                acc + item.credits,\n                                            0\n                                        )}\n                                        totalCredits={selectedCarreer.cuatris.reduce(\n                                            (acc: number, cuatri: any) =>\n                                                acc +\n                                                cuatri.subjects.reduce(\n                                                    (acc2: any, sub: any) =>\n                                                        acc2 + sub.credits,\n                                                    0\n                                                ),\n                                            0\n                                        )}\n                                    />\n                                </Grid>\n                            ))}\n                    </Grid>\n\n                    <div className=\"footer-container\">\n                        <Divider\n                            style={{\n                                flexGrow: 1,\n                                marginBottom: \"2em\",\n                                marginTop: \"2em\",\n                            }}\n                        />\n\n                        <footer>\n                            &copy; Miguel Araujo{\" \"}\n                            <Link\n                                href=\"https://github.com/maikuh\"\n                                target=\"_blank\"\n                            >\n                                GitHub\n                            </Link>{\" \"}\n                            /{\" \"}\n                            <Link\n                                href=\"https://gitlab.com/maikuh\"\n                                target=\"_blank\"\n                            >\n                                GitLab\n                            </Link>\n                        </footer>\n                    </div>\n                </Container>\n            </ThemeProvider>\n        </React.Fragment>\n    );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}