{"version":3,"sources":["components/Footer.tsx","components/SearchBox.tsx","components/Navbar.tsx","pensum-pages.ts","components/InfoCard.tsx","helpers/prerequisitesMet.ts","helpers/getSubjectsThatCanBeSelected.ts","components/CuatriTable.tsx","components/MainContent.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["Footer","className","Divider","style","flexGrow","marginBottom","marginTop","Link","href","target","SearchBox","pensums","selectedCarreer","selectCarreer","onCarreerSelect","carreer","localStorage","setItem","JSON","stringify","pensumCode","useEffect","lastSelectedCarreer","getItem","parse","Grid","container","direction","justify","alignItems","item","length","Autocomplete","id","autoComplete","autoHighlight","options","getOptionLabel","c","carreerName","value","find","p","width","onChange","e","renderInput","params","TextField","label","variant","Navbar","selectedSubjects","setSelectedSubjects","fileInputRef","createRef","HideOnScroll","children","window","trigger","useScrollTrigger","undefined","Slide","appear","in","classes","makeStyles","theme","root","menuButton","marginRight","spacing","toolbar","minHeight","paddingTop","paddingBottom","title","alignSelf","sectionRight","useStyles","Fragment","CssBaseline","AppBar","color","Toolbar","Typography","map","cuatris","totalCredits","Tooltip","IconButton","fontSize","onClick","dataStr","dataUri","encodeURIComponent","linkElement","document","createElement","setAttribute","click","setTimeout","remove","exportToJsonFile","current","type","ref","display","uploadedFile","files","reader","FileReader","onload","event","fileContents","result","readAsText","alert","importFromJsonFile","InfoCard","date","creditsCount","subjectsCount","totalSubjects","useState","originalPensumLink","setOriginalPensumLink","pensumPages","toUpperCase","includes","split","pop","alignContent","xs","md","Card","CardContent","gutterBottom","component","List","ListItem","ListItemAvatar","Avatar","ListItemText","primary","secondary","Date","toLocaleDateString","hour12","weekday","year","day","month","prerequisitesMet","subject","prerequisites","every","Number","slice","s","code","newSelectedSubjects","subjectsThatCanBeSelected","push","CuatriTable","cuatri","subjectSelected","onSubjectSelectedBulk","period","setPeriod","checkboxStatus","setCheckboxStatus","selectSubject","getSubjectNameFromPrereq","prereq","subjects","flat","name","selectedSubjectsChecked","forEach","some","selectedSubject","getSubjectsThatCanBeSelected","HtmlTooltip","withStyles","tooltip","backgroundColor","border","TableContainer","Paper","flex","Table","aria-label","TableHead","TableRow","TableCell","padding","Checkbox","indeterminate","checked","disabled","inputProps","align","TableBody","row","hover","key","selected","scope","credits","pr","MainContent","onSubjectSelected","reduce","acc","acc2","savedSelectedSubjects","defaultSelectedSubjects","Object","keys","pensumsJson","pensum","App","setSelectedCarreer","darkTheme","createMuiTheme","palette","ThemeProvider","Container","fixed","subjectsToRemove","temp","subjectWithPrereq","ss","filter","concat","cuatriSubjectsCount","notInSelectedSubjects","newSelectedSubject","subjectToRemove","getAllPrerequisiteSubjects","Set","nss","lastFoundSubject","lastSubjectsToRemove","subjectsWithPrereq","Boolean","location","hostname","match","ReactDOM","render","StrictMode","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.050cbe80.chunk.js","sourcesContent":["import React from \"react\";\r\nimport { Divider, Link } from \"@material-ui/core\";\r\n\r\nexport const Footer = () => {\r\n    return (\r\n        <div className=\"footer-container\">\r\n            <Divider\r\n                style={{\r\n                    flexGrow: 1,\r\n                    marginBottom: \"2em\",\r\n                    marginTop: \"2em\",\r\n                }}\r\n            />\r\n\r\n            <footer>\r\n                &copy; Miguel Araujo{\" \"}\r\n                <Link href=\"https://github.com/maikuh\" target=\"_blank\">\r\n                    GitHub\r\n                </Link>{\" \"}\r\n                /{\" \"}\r\n                <Link href=\"https://gitlab.com/maikuh\" target=\"_blank\">\r\n                    GitLab\r\n                </Link>\r\n            </footer>\r\n        </div>\r\n    );\r\n};\r\n","import React, { useEffect } from \"react\";\r\nimport { Grid, TextField } from \"@material-ui/core\";\r\nimport { Autocomplete } from \"@material-ui/lab\";\r\nimport { SearchBoxProps } from \"../interfaces/props.interface\";\r\n\r\nexport const SearchBox = ({\r\n    pensums,\r\n    selectedCarreer,\r\n    selectCarreer,\r\n}: SearchBoxProps) => {\r\n    useEffect(() => {\r\n        if (!selectedCarreer) {\r\n            const lastSelectedCarreer = localStorage.getItem(\r\n                \"lastSelectedCarreer\"\r\n            );\r\n\r\n            if (lastSelectedCarreer)\r\n                onCarreerSelect(JSON.parse(lastSelectedCarreer));\r\n        }\r\n    });\r\n\r\n    function onCarreerSelect(carreer: any) {\r\n        localStorage.setItem(\"lastSelectedCarreer\", JSON.stringify(carreer));\r\n        selectCarreer(carreer ? carreer.pensumCode : null);\r\n    }\r\n\r\n    return (\r\n        <Grid\r\n            className=\"search-box\"\r\n            container\r\n            direction=\"row\"\r\n            justify=\"center\"\r\n            alignItems=\"center\"\r\n        >\r\n            <Grid item>\r\n                {selectedCarreer &&\r\n                selectedCarreer.pensumCode &&\r\n                selectedCarreer.pensumCode.length > 0 ? (\r\n                    <Autocomplete\r\n                        id=\"carreer-search-box\"\r\n                        autoComplete\r\n                        autoHighlight\r\n                        options={pensums}\r\n                        getOptionLabel={(c: any) =>\r\n                            `${c.pensumCode} - ${c.carreerName}`\r\n                        }\r\n                        value={pensums.find(\r\n                            (p: any) =>\r\n                                p.pensumCode === selectedCarreer.pensumCode\r\n                        )}\r\n                        style={{ width: 600 }}\r\n                        onChange={(e: any, value: any) =>\r\n                            onCarreerSelect(value)\r\n                        }\r\n                        renderInput={(params) => (\r\n                            <TextField\r\n                                {...params}\r\n                                label=\"Elegir Carrera\"\r\n                                variant=\"outlined\"\r\n                            />\r\n                        )}\r\n                    />\r\n                ) : (\r\n                    <Autocomplete\r\n                        id=\"carreer-search-box\"\r\n                        autoComplete\r\n                        autoHighlight\r\n                        options={pensums}\r\n                        getOptionLabel={(c: any) =>\r\n                            `${c.pensumCode} - ${c.carreerName}`\r\n                        }\r\n                        style={{ width: 600 }}\r\n                        onChange={(e: any, value: any) =>\r\n                            onCarreerSelect(value)\r\n                        }\r\n                        renderInput={(params) => (\r\n                            <TextField\r\n                                {...params}\r\n                                label=\"Elegir Carrera\"\r\n                                variant=\"outlined\"\r\n                            />\r\n                        )}\r\n                    />\r\n                )}\r\n            </Grid>\r\n        </Grid>\r\n    );\r\n};\r\n","import React, { createRef, ChangeEvent } from \"react\";\r\nimport {\r\n    CssBaseline,\r\n    Toolbar,\r\n    Typography,\r\n    IconButton,\r\n    Tooltip,\r\n    AppBar,\r\n    useScrollTrigger,\r\n    Slide,\r\n    makeStyles,\r\n} from \"@material-ui/core\";\r\nimport {\r\n    Github as GithubIcon,\r\n    Gitlab as GitlabIcon,\r\n    Download as DownloadIcon,\r\n    Upload as UploadIcon,\r\n} from \"mdi-material-ui\";\r\nimport { SearchBox } from \"./SearchBox\";\r\nimport { NavbarProps } from \"../interfaces/props.interface\";\r\n\r\nexport const Navbar = ({\r\n    pensums,\r\n    selectedCarreer,\r\n    selectedSubjects,\r\n    setSelectedSubjects,\r\n    onCarreerSelect,\r\n}: NavbarProps) => {\r\n    const fileInputRef = createRef<HTMLInputElement>();\r\n\r\n    function exportToJsonFile() {\r\n        let dataStr = JSON.stringify(selectedSubjects);\r\n        let dataUri =\r\n            \"data:application/json;charset=utf-8,\" +\r\n            encodeURIComponent(dataStr);\r\n\r\n        let exportFileDefaultName = \"uptracker.json\";\r\n\r\n        let linkElement = document.createElement(\"a\");\r\n        linkElement.setAttribute(\"href\", dataUri);\r\n        linkElement.setAttribute(\"download\", exportFileDefaultName);\r\n        linkElement.click();\r\n\r\n        setTimeout(() => {\r\n            linkElement.remove();\r\n        }, 5000);\r\n    }\r\n\r\n    function clickImportFromJsonInput() {\r\n        if (fileInputRef && fileInputRef.current) {\r\n            fileInputRef.current.click();\r\n        }\r\n    }\r\n\r\n    function importFromJsonFile(e: ChangeEvent<HTMLInputElement>) {\r\n        const uploadedFile =\r\n            e.target &&\r\n            e.target.files &&\r\n            e.target.files.length > 0 &&\r\n            e.target.files[0];\r\n\r\n        if (uploadedFile && uploadedFile.type === \"application/json\") {\r\n            const reader = new FileReader();\r\n\r\n            reader.onload = (event: any) => {\r\n                const fileContents = event.target.result;\r\n                localStorage.setItem(\"selectedSubjects\", fileContents);\r\n                setSelectedSubjects(JSON.parse(fileContents));\r\n            };\r\n\r\n            reader.readAsText(uploadedFile);\r\n        } else {\r\n            alert(\"Por favor seleccione un archivo valido\");\r\n        }\r\n    }\r\n\r\n    function HideOnScroll(params: any) {\r\n        const { children, window } = params;\r\n        const trigger = useScrollTrigger({\r\n            target: window ? window() : undefined,\r\n        });\r\n\r\n        return (\r\n            <Slide appear={false} direction=\"down\" in={!trigger}>\r\n                {children}\r\n            </Slide>\r\n        );\r\n    }\r\n\r\n    const useStyles = makeStyles((theme) => ({\r\n        root: {\r\n            flexGrow: 1,\r\n        },\r\n        menuButton: {\r\n            marginRight: theme.spacing(2),\r\n        },\r\n        toolbar: {\r\n            minHeight: 128,\r\n            alignItems: \"flex-start\",\r\n            paddingTop: theme.spacing(1),\r\n            paddingBottom: theme.spacing(1),\r\n        },\r\n        title: {\r\n            flexGrow: 1,\r\n            alignSelf: \"center\",\r\n        },\r\n        sectionRight: {\r\n            alignSelf: \"center\",\r\n        },\r\n    }));\r\n\r\n    const classes = useStyles();\r\n\r\n    return (\r\n        <React.Fragment>\r\n            <CssBaseline />\r\n\r\n            <HideOnScroll>\r\n                <AppBar color=\"default\">\r\n                    <Toolbar className={classes.toolbar}>\r\n                        <Typography className={classes.title} variant=\"h5\">\r\n                            UNAPEC Pensum Tracker\r\n                        </Typography>\r\n\r\n                        <SearchBox\r\n                            pensums={pensums.map((p) => {\r\n                                const { cuatris, totalCredits, ...rest } = p;\r\n                                return rest;\r\n                            })}\r\n                            selectedCarreer={selectedCarreer}\r\n                            selectCarreer={onCarreerSelect}\r\n                        />\r\n\r\n                        <div className={classes.root}></div>\r\n\r\n                        <div className={classes.sectionRight}>\r\n                            <Tooltip title=\"GitHub Repo\">\r\n                                <IconButton\r\n                                    href=\"https://github.com/maikuh/unapec-pensum-tracker\"\r\n                                    target=\"_blank\"\r\n                                >\r\n                                    <GithubIcon style={{ fontSize: 32 }} />\r\n                                </IconButton>\r\n                            </Tooltip>\r\n\r\n                            <Tooltip title=\"GitLab Repo\">\r\n                                <IconButton\r\n                                    href=\"https://gitlab.com/maikuh/unapec-pensum-tracker\"\r\n                                    target=\"_blank\"\r\n                                >\r\n                                    <GitlabIcon style={{ fontSize: 32 }} />\r\n                                </IconButton>\r\n                            </Tooltip>\r\n\r\n                            <Tooltip title=\"Exportar datos a archivo\">\r\n                                <IconButton onClick={() => exportToJsonFile()}>\r\n                                    <DownloadIcon />\r\n                                </IconButton>\r\n                            </Tooltip>\r\n\r\n                            <Tooltip title=\"Importar datos de archivo\">\r\n                                <IconButton\r\n                                    onClick={() => clickImportFromJsonInput()}\r\n                                >\r\n                                    <UploadIcon />\r\n                                </IconButton>\r\n                            </Tooltip>\r\n\r\n                            <input\r\n                                type=\"file\"\r\n                                ref={fileInputRef}\r\n                                style={{ display: \"none\" }}\r\n                                onChange={(e) => importFromJsonFile(e)}\r\n                            />\r\n                        </div>\r\n                    </Toolbar>\r\n                </AppBar>\r\n            </HideOnScroll>\r\n\r\n            <Toolbar />\r\n        </React.Fragment>\r\n    );\r\n};\r\n","export default [\r\n    \"https://servicios.unapec.edu.do/pensum/Main/Detalles/ADM\",\r\n    \"https://servicios.unapec.edu.do/pensum/Main/Detalles/ATH\",\r\n    \"https://servicios.unapec.edu.do/pensum/Main/Detalles/CDG10\",\r\n    \"https://servicios.unapec.edu.do/pensum/Main/Detalles/CON\",\r\n    \"https://servicios.unapec.edu.do/pensum/Main/Detalles/DEr\",\r\n    \"https://servicios.unapec.edu.do/pensum/Main/Detalles/DIG\",\r\n    \"https://servicios.unapec.edu.do/pensum/Main/Detalles/DIN\",\r\n    \"https://servicios.unapec.edu.do/pensum/Main/Detalles/FIN\",\r\n    \"https://servicios.unapec.edu.do/pensum/Main/Detalles/IEL\",\r\n    \"https://servicios.unapec.edu.do/pensum/Main/Detalles/IND\",\r\n    \"https://servicios.unapec.edu.do/pensum/Main/Detalles/INE\",\r\n    \"https://servicios.unapec.edu.do/pensum/Main/Detalles/ISC\",\r\n    \"https://servicios.unapec.edu.do/pensum/Main/Detalles/ISO\",\r\n    \"https://servicios.unapec.edu.do/pensum/Main/Detalles/LES11\",\r\n    \"https://servicios.unapec.edu.do/pensum/Main/Detalles/LIE11\",\r\n    \"https://servicios.unapec.edu.do/pensum/Main/Detalles/LMS11\",\r\n    \"https://servicios.unapec.edu.do/pensum/Main/Detalles/MER\",\r\n    \"https://servicios.unapec.edu.do/pensum/Main/Detalles/NIN\",\r\n    \"https://servicios.unapec.edu.do/pensum/Main/Detalles/PUB\",\r\n    \"https://servicios.unapec.edu.do/pensum/Main/Detalles/TAF\",\r\n];\r\n","import React, { useEffect, useState } from \"react\";\r\nimport {\r\n    List,\r\n    ListItem,\r\n    ListItemAvatar,\r\n    Avatar,\r\n    ListItemText,\r\n    Grid,\r\n    Typography,\r\n    Card,\r\n    CardContent,\r\n    Link,\r\n} from \"@material-ui/core\";\r\nimport {\r\n    FileDocumentOutline as FileDocumentIcon,\r\n    CreditCardOutline as CreditIcon,\r\n    Calendar as CalendarIcon,\r\n    OpenInNew as OpenInNewIcon,\r\n} from \"mdi-material-ui\";\r\nimport { InfoCardProps } from \"../interfaces/props.interface\";\r\nimport pensumPages from \"../pensum-pages\";\r\n\r\nexport const InfoCard = ({\r\n    date,\r\n    pensumCode,\r\n    creditsCount,\r\n    totalCredits,\r\n    subjectsCount,\r\n    totalSubjects,\r\n}: InfoCardProps) => {\r\n    const [originalPensumLink, setOriginalPensumLink] = useState<String>(\"\");\r\n\r\n    useEffect(() => {\r\n        setOriginalPensumLink(\r\n            pensumPages.find((p) =>\r\n                pensumCode\r\n                    .toUpperCase()\r\n                    .includes(p.split(\"/\").pop()!.toUpperCase())\r\n            )!\r\n        );\r\n    }, [pensumCode, originalPensumLink]);\r\n\r\n    return (\r\n        <Grid\r\n            container\r\n            justify=\"center\"\r\n            alignContent=\"center\"\r\n            alignItems=\"center\"\r\n            className=\"info-card\"\r\n        >\r\n            <Grid item xs={12} md={6}>\r\n                <Card>\r\n                    <CardContent>\r\n                        <Typography gutterBottom variant=\"h5\" component=\"h2\">\r\n                            Informacion\r\n                        </Typography>\r\n\r\n                        <List>\r\n                            <ListItem>\r\n                                <ListItemAvatar>\r\n                                    <Avatar>\r\n                                        <CalendarIcon />\r\n                                    </Avatar>\r\n                                </ListItemAvatar>\r\n                                <ListItemText\r\n                                    primary=\"Fecha del Pensum\"\r\n                                    secondary={new Date(\r\n                                        date\r\n                                    ).toLocaleDateString(\"es-MX\", {\r\n                                        hour12: true,\r\n                                        weekday: \"long\",\r\n                                        year: \"numeric\",\r\n                                        day: \"2-digit\",\r\n                                        month: \"long\",\r\n                                    })}\r\n                                />\r\n                            </ListItem>\r\n                            <ListItem>\r\n                                <ListItemAvatar>\r\n                                    <Avatar>\r\n                                        <FileDocumentIcon />\r\n                                    </Avatar>\r\n                                </ListItemAvatar>\r\n                                <ListItemText\r\n                                    primary=\"Materias\"\r\n                                    secondary={`${subjectsCount} / ${totalSubjects}`}\r\n                                />\r\n                            </ListItem>\r\n                            <ListItem>\r\n                                <ListItemAvatar>\r\n                                    <Avatar>\r\n                                        <CreditIcon />\r\n                                    </Avatar>\r\n                                </ListItemAvatar>\r\n                                <ListItemText\r\n                                    primary=\"Creditos\"\r\n                                    secondary={`${creditsCount} / ${totalCredits}`}\r\n                                />\r\n                            </ListItem>\r\n\r\n                            <ListItem>\r\n                                <ListItemAvatar>\r\n                                    <Avatar>\r\n                                        <OpenInNewIcon />\r\n                                    </Avatar>\r\n                                </ListItemAvatar>\r\n                                <ListItemText\r\n                                    primary=\"Pensum Original\"\r\n                                    secondary={\r\n                                        <Link\r\n                                            href={`${originalPensumLink}`}\r\n                                            target=\"_blank\"\r\n                                        >\r\n                                            Link al Pensum\r\n                                        </Link>\r\n                                    }\r\n                                />\r\n                            </ListItem>\r\n                        </List>\r\n                    </CardContent>\r\n                </Card>\r\n            </Grid>\r\n        </Grid>\r\n    );\r\n};\r\n","import { Subject } from \"../interfaces/pensums.interface\";\r\n\r\nexport default function prerequisitesMet(\r\n    subject: Subject,\r\n    selectedSubjects: Subject[],\r\n    creditsCount: number,\r\n    totalCredits: number\r\n) {\r\n    let isMet: boolean =\r\n        subject.prerequisites.length === 0\r\n            ? true\r\n            : subject.prerequisites.every((p: string) =>\r\n                  p.includes(\"%\")\r\n                      ? (creditsCount / totalCredits) * 100 >=\r\n                        Number(p.slice(0, 2))\r\n                      : selectedSubjects.map((s: any) => s.code).includes(p)\r\n              );\r\n\r\n    return isMet;\r\n}\r\n","import { Subject } from \"../interfaces/pensums.interface\";\r\nimport prerequisitesMet from \"./prerequisitesMet\";\r\n\r\nexport default function (\r\n    newSelectedSubjects: Subject[],\r\n    selectedSubjects: Subject[],\r\n    creditsCount: number,\r\n    totalCredits: number\r\n) {\r\n    const subjectsThatCanBeSelected = [];\r\n\r\n    for (const subject of newSelectedSubjects) {\r\n        if (\r\n            prerequisitesMet(\r\n                subject,\r\n                selectedSubjects,\r\n                creditsCount,\r\n                totalCredits\r\n            )\r\n        )\r\n            subjectsThatCanBeSelected.push(subject);\r\n    }\r\n\r\n    return subjectsThatCanBeSelected;\r\n}\r\n","import React, { useEffect, useState } from \"react\";\r\nimport {\r\n    TableContainer,\r\n    Paper,\r\n    Table,\r\n    TableHead,\r\n    TableRow,\r\n    TableCell,\r\n    TableBody,\r\n    Typography,\r\n    Toolbar,\r\n    Checkbox,\r\n    Tooltip,\r\n    withStyles,\r\n    Theme,\r\n} from \"@material-ui/core\";\r\nimport { CuatriTableProps } from \"../interfaces/props.interface\";\r\nimport { SelectAllCheckboxStatus } from \"../interfaces/checkbox.types\";\r\nimport getSubjectsThatCanBeSelected from \"../helpers/getSubjectsThatCanBeSelected\";\r\nimport prerequisitesMet from \"../helpers/prerequisitesMet\";\r\nimport { Subject } from \"../interfaces/pensums.interface\";\r\n\r\nexport const CuatriTable = ({\r\n    cuatri,\r\n    selectedSubjects,\r\n    subjectSelected,\r\n    cuatris,\r\n    pensumCode,\r\n    totalCredits,\r\n    creditsCount,\r\n    onSubjectSelectedBulk,\r\n}: CuatriTableProps) => {\r\n    const [period, setPeriod] = useState(0);\r\n    const [checkboxStatus, setCheckboxStatus] = useState<\r\n        SelectAllCheckboxStatus\r\n    >(\"unchecked\");\r\n\r\n    useEffect(() => {\r\n        setPeriod(cuatri.period);\r\n\r\n        let selectedSubjectsChecked = 0;\r\n\r\n        cuatri.subjects.forEach((subject) => {\r\n            const subjectChecked = selectedSubjects[pensumCode].some(\r\n                (selectedSubject) => selectedSubject.code === subject.code\r\n            );\r\n\r\n            if (subjectChecked) selectedSubjectsChecked++;\r\n        });\r\n\r\n        if (\r\n            selectedSubjectsChecked > 0 &&\r\n            selectedSubjectsChecked < cuatri.subjects.length\r\n        )\r\n            setCheckboxStatus(\"indeterminate\");\r\n        else if (selectedSubjectsChecked === cuatri.subjects.length)\r\n            setCheckboxStatus(\"checked\");\r\n        else if (\r\n            getSubjectsThatCanBeSelected(\r\n                cuatri.subjects,\r\n                selectedSubjects[pensumCode],\r\n                creditsCount,\r\n                totalCredits\r\n            ).length === 0\r\n        )\r\n            setCheckboxStatus(\"disabled\");\r\n        else setCheckboxStatus(\"unchecked\");\r\n    }, [\r\n        cuatri.period,\r\n        checkboxStatus,\r\n        cuatri.subjects,\r\n        pensumCode,\r\n        selectedSubjects,\r\n        creditsCount,\r\n        totalCredits,\r\n    ]);\r\n\r\n    function selectSubject(subject: Subject) {\r\n        if (\r\n            prerequisitesMet(\r\n                subject,\r\n                selectedSubjects[pensumCode],\r\n                creditsCount,\r\n                totalCredits\r\n            )\r\n        )\r\n            subjectSelected(subject);\r\n        else\r\n            alert(\r\n                \"No tienes los prerequisitos completados para seleccionar esta materia.\"\r\n            );\r\n    }\r\n\r\n    function getSubjectNameFromPrereq(prereq: string) {\r\n        const subject = cuatris\r\n            .map((cuatri: any) => cuatri.subjects)\r\n            .flat()\r\n            .find((subject: any) => subject.code === prereq);\r\n\r\n        return subject ? subject.name : \"\";\r\n    }\r\n\r\n    function onSelectAllCheckboxClick() {\r\n        const subjectsThatCanBeSelected = getSubjectsThatCanBeSelected(\r\n            cuatri.subjects,\r\n            selectedSubjects[pensumCode],\r\n            creditsCount,\r\n            totalCredits\r\n        );\r\n\r\n        onSubjectSelectedBulk(\r\n            subjectsThatCanBeSelected,\r\n            checkboxStatus,\r\n            cuatri.subjects.length\r\n        );\r\n    }\r\n\r\n    const HtmlTooltip = withStyles((theme: Theme) => ({\r\n        tooltip: {\r\n            backgroundColor: \"rgba(245, 0, 87, 0.76)\",\r\n            color: \"#fafafa\",\r\n            border: \"1px solid rgba(245, 0, 87, 0.76)\",\r\n        },\r\n    }))(Tooltip);\r\n\r\n    return (\r\n        <TableContainer component={Paper}>\r\n            <Toolbar>\r\n                <Typography\r\n                    style={{ flex: \"1 1 100%\" }}\r\n                    variant=\"h6\"\r\n                    id=\"tableTitle\"\r\n                    component=\"div\"\r\n                >\r\n                    Cuatrimestre {period}\r\n                </Typography>\r\n            </Toolbar>\r\n            <Table aria-label=\"simple table\">\r\n                <TableHead>\r\n                    <TableRow>\r\n                        <TableCell padding=\"checkbox\">\r\n                            <Checkbox\r\n                                indeterminate={\r\n                                    checkboxStatus === \"indeterminate\"\r\n                                }\r\n                                checked={checkboxStatus === \"checked\"}\r\n                                disabled={checkboxStatus === \"disabled\"}\r\n                                onChange={onSelectAllCheckboxClick}\r\n                                inputProps={{\r\n                                    \"aria-label\": \"select all subjects\",\r\n                                }}\r\n                            />\r\n                        </TableCell>\r\n                        <TableCell>Código</TableCell>\r\n                        <TableCell align=\"right\">Nombre</TableCell>\r\n                        <TableCell align=\"right\">Créditos</TableCell>\r\n                        <TableCell align=\"right\">Pre-requisitos</TableCell>\r\n                    </TableRow>\r\n                </TableHead>\r\n                <TableBody>\r\n                    {selectedSubjects[pensumCode] &&\r\n                        cuatri.subjects.map((row) => (\r\n                            <TableRow\r\n                                hover\r\n                                key={row.code}\r\n                                onClick={() => selectSubject(row)}\r\n                                className={\r\n                                    !prerequisitesMet(\r\n                                        row,\r\n                                        selectedSubjects[pensumCode],\r\n                                        creditsCount,\r\n                                        totalCredits\r\n                                    )\r\n                                        ? \"disabled-row\"\r\n                                        : \"\"\r\n                                }\r\n                                selected={selectedSubjects[pensumCode].some(\r\n                                    (s: any) => s.code === row.code\r\n                                )}\r\n                            >\r\n                                <TableCell padding=\"checkbox\">\r\n                                    <Checkbox\r\n                                        checked={selectedSubjects[\r\n                                            pensumCode\r\n                                        ].some((s) => s.code === row.code)}\r\n                                        onChange={(e) => selectSubject(row)}\r\n                                        disabled={\r\n                                            !prerequisitesMet(\r\n                                                row,\r\n                                                selectedSubjects[pensumCode],\r\n                                                creditsCount,\r\n                                                totalCredits\r\n                                            )\r\n                                        }\r\n                                    />\r\n                                </TableCell>\r\n                                <TableCell component=\"th\" scope=\"row\">\r\n                                    {row.code}\r\n                                </TableCell>\r\n                                <TableCell align=\"right\">{row.name}</TableCell>\r\n                                <TableCell align=\"right\">\r\n                                    {row.credits}\r\n                                </TableCell>\r\n                                <TableCell align=\"right\">\r\n                                    {row.prerequisites.map((pr: any) =>\r\n                                        pr.includes(\"%\") ? (\r\n                                            <p key={row.code + pr}>{pr}</p>\r\n                                        ) : (\r\n                                            <HtmlTooltip\r\n                                                className=\"prerequisite-tooltip\"\r\n                                                key={row.code + pr}\r\n                                                title={\r\n                                                    <Typography\r\n                                                        variant=\"h6\"\r\n                                                        className=\"prerequisite-tooltip-content\"\r\n                                                    >\r\n                                                        {getSubjectNameFromPrereq(\r\n                                                            pr\r\n                                                        )}\r\n                                                    </Typography>\r\n                                                }\r\n                                            >\r\n                                                <p>{pr}</p>\r\n                                            </HtmlTooltip>\r\n                                        )\r\n                                    )}\r\n                                </TableCell>\r\n                            </TableRow>\r\n                        ))}\r\n                </TableBody>\r\n            </Table>\r\n        </TableContainer>\r\n    );\r\n};\r\n","import React from \"react\";\r\nimport { Grid, Typography } from \"@material-ui/core\";\r\nimport { InfoCard } from \"./InfoCard\";\r\nimport { CuatriTable } from \"./CuatriTable\";\r\nimport { MainContentProps } from \"../interfaces/props.interface\";\r\n\r\nexport const MainContent = ({\r\n    selectedCarreer,\r\n    selectedSubjects,\r\n    onSubjectSelected,\r\n    onSubjectSelectedBulk,\r\n}: MainContentProps) => {\r\n    return (\r\n        <React.Fragment>\r\n            {selectedCarreer &&\r\n            selectedCarreer.cuatris &&\r\n            selectedCarreer.cuatris.length > 0 ? (\r\n                <InfoCard\r\n                    date={selectedCarreer.date}\r\n                    pensumCode={selectedCarreer.pensumCode}\r\n                    subjectsCount={\r\n                        selectedSubjects[selectedCarreer.pensumCode].length\r\n                    }\r\n                    totalSubjects={selectedCarreer.cuatris.reduce(\r\n                        (acc, subject) => acc + subject.subjects.length,\r\n                        0\r\n                    )}\r\n                    creditsCount={selectedSubjects[\r\n                        selectedCarreer.pensumCode\r\n                    ].reduce((acc, subject) => acc + subject.credits, 0)}\r\n                    totalCredits={selectedCarreer.cuatris.reduce(\r\n                        (acc, cuatri) =>\r\n                            acc +\r\n                            cuatri.subjects.reduce(\r\n                                (acc2, subject) => acc2 + subject.credits,\r\n                                0\r\n                            ),\r\n                        0\r\n                    )}\r\n                />\r\n            ) : (\r\n                <Typography variant=\"h1\" className=\"main-title\">\r\n                    Selecciona una carrera del dropdown arriba\r\n                </Typography>\r\n            )}\r\n\r\n            <Grid container spacing={2} style={{ flexGrow: 1 }}>\r\n                {selectedCarreer &&\r\n                    selectedCarreer.cuatris &&\r\n                    selectedCarreer.cuatris.length > 0 &&\r\n                    selectedCarreer.cuatris.map((cuatri) => (\r\n                        <Grid item xs={6} key={cuatri.period}>\r\n                            <CuatriTable\r\n                                cuatri={cuatri}\r\n                                cuatris={selectedCarreer.cuatris}\r\n                                pensumCode={selectedCarreer.pensumCode}\r\n                                selectedSubjects={selectedSubjects}\r\n                                subjectSelected={onSubjectSelected}\r\n                                onSubjectSelectedBulk={onSubjectSelectedBulk}\r\n                                creditsCount={selectedSubjects[\r\n                                    selectedCarreer.pensumCode\r\n                                ].reduce((acc, item) => acc + item.credits, 0)}\r\n                                totalCredits={selectedCarreer.cuatris.reduce(\r\n                                    (acc, cuatri) =>\r\n                                        acc +\r\n                                        cuatri.subjects.reduce(\r\n                                            (acc2, subject) =>\r\n                                                acc2 + subject.credits,\r\n                                            0\r\n                                        ),\r\n                                    0\r\n                                )}\r\n                            />\r\n                        </Grid>\r\n                    ))}\r\n            </Grid>\r\n        </React.Fragment>\r\n    );\r\n};\r\n","import React, { useState, useEffect } from \"react\";\r\nimport { Container, createMuiTheme, ThemeProvider } from \"@material-ui/core\";\r\nimport \"./App.css\";\r\nimport pensumsJson from \"./pensums.json\";\r\nimport { Footer } from \"./components/Footer\";\r\nimport { Navbar } from \"./components/Navbar\";\r\nimport { MainContent } from \"./components/MainContent\";\r\nimport { SelectedSubjects } from \"./interfaces/selectedSubjects.interface\";\r\nimport { Pensum, Subject } from \"./interfaces/pensums.interface\";\r\nimport { SelectAllCheckboxStatus } from \"./interfaces/checkbox.types\";\r\n\r\nconst savedSelectedSubjects = localStorage.getItem(\"selectedSubjects\");\r\nconst defaultSelectedSubjects: SelectedSubjects = savedSelectedSubjects\r\n    ? JSON.parse(savedSelectedSubjects)\r\n    : {};\r\n\r\nif (Object.keys(defaultSelectedSubjects).length === 0) {\r\n    for (const pensum of pensumsJson) {\r\n        defaultSelectedSubjects[pensum.pensumCode] = [];\r\n    }\r\n}\r\n\r\nfunction App() {\r\n    const pensums: Pensum[] = pensumsJson;\r\n    const [selectedCarreer, setSelectedCarreer] = useState<Pensum | null>(null);\r\n    const [selectedSubjects, setSelectedSubjects] = useState<SelectedSubjects>(\r\n        defaultSelectedSubjects\r\n    );\r\n\r\n    const darkTheme = createMuiTheme({\r\n        palette: {\r\n            type: \"dark\",\r\n        },\r\n    });\r\n\r\n    function onCarreerSelect(pensumCode: string) {\r\n        const carreer = pensums.find((p) => p.pensumCode === pensumCode);\r\n        setSelectedCarreer(carreer!);\r\n    }\r\n\r\n    function handleBulkSelect(\r\n        newSelectedSubjects: Subject[],\r\n        checkboxStatus: SelectAllCheckboxStatus,\r\n        cuatriSubjectsCount: number\r\n    ) {\r\n        if (!selectedCarreer) return;\r\n\r\n        const notInSelectedSubjects: Subject[] = [];\r\n        const subjects = selectedSubjects[selectedCarreer.pensumCode];\r\n        let temp: Subject[] = [];\r\n\r\n        function getAllPrerequisiteSubjects(\r\n            lastFoundSubject: string,\r\n            lastSubjectsToRemove: string[]\r\n        ): string[] {\r\n            const subjectsWithPrereq = subjects\r\n                .filter((subject) =>\r\n                    subject.prerequisites.includes(lastFoundSubject)\r\n                )\r\n                .map((subject) => subject.code);\r\n\r\n            if (subjectsWithPrereq.length > 0) {\r\n                lastSubjectsToRemove.push(...subjectsWithPrereq);\r\n\r\n                for (const subjectWithPrereq of subjectsWithPrereq) {\r\n                    lastSubjectsToRemove = getAllPrerequisiteSubjects(\r\n                        subjectWithPrereq,\r\n                        lastSubjectsToRemove\r\n                    );\r\n                }\r\n            }\r\n\r\n            return lastSubjectsToRemove;\r\n        }\r\n\r\n        if (checkboxStatus === \"unchecked\") {\r\n            temp = subjects.concat(...newSelectedSubjects);\r\n        } else if (checkboxStatus === \"indeterminate\") {\r\n            if (newSelectedSubjects.length < cuatriSubjectsCount) {\r\n                let subjectsToRemove = newSelectedSubjects.map(\r\n                    (newSelectedSubject) => newSelectedSubject.code\r\n                );\r\n\r\n                for (const subjectToRemove of subjectsToRemove) {\r\n                    subjectsToRemove = getAllPrerequisiteSubjects(\r\n                        subjectToRemove,\r\n                        subjectsToRemove\r\n                    );\r\n                }\r\n\r\n                subjectsToRemove = [...new Set(subjectsToRemove)];\r\n\r\n                temp = subjects.filter(\r\n                    (subject) => !subjectsToRemove.includes(subject.code)\r\n                );\r\n            } else {\r\n                newSelectedSubjects.forEach((newSelectedSubject) => {\r\n                    const isInSelectedSubjects = subjects.some(\r\n                        (subject) => subject.code === newSelectedSubject.code\r\n                    );\r\n\r\n                    if (!isInSelectedSubjects)\r\n                        notInSelectedSubjects.push(newSelectedSubject);\r\n                });\r\n\r\n                temp = subjects.concat(...notInSelectedSubjects);\r\n            }\r\n        } else if (checkboxStatus === \"checked\") {\r\n            let subjectsToRemove = newSelectedSubjects.map((nss) => nss.code);\r\n\r\n            for (const subjectToRemove of subjectsToRemove) {\r\n                subjectsToRemove = getAllPrerequisiteSubjects(\r\n                    subjectToRemove,\r\n                    subjectsToRemove\r\n                );\r\n            }\r\n\r\n            subjectsToRemove = [...new Set(subjectsToRemove)];\r\n\r\n            temp = subjects.filter(\r\n                (subject) => !subjectsToRemove.includes(subject.code)\r\n            );\r\n        }\r\n\r\n        setSelectedSubjects({\r\n            ...selectedSubjects,\r\n            [selectedCarreer.pensumCode]: temp,\r\n        });\r\n    }\r\n\r\n    function onSubjectSelected(\r\n        subject: Subject,\r\n        subjectsToRemove: string[] = []\r\n    ) {\r\n        if (!selectedCarreer) return;\r\n\r\n        // Temporary variable to hold changes\r\n        let temp: Subject[];\r\n        const subjects = selectedSubjects[selectedCarreer.pensumCode];\r\n\r\n        // If subject has already been selected, remove it\r\n        if (\r\n            subjects.some(\r\n                (selectedSubject) => selectedSubject.code === subject.code\r\n            )\r\n        ) {\r\n            // Add the subject to the removal list\r\n            subjectsToRemove.push(subject.code);\r\n\r\n            // Check if any of the other subjects has this subject as prerequisite\r\n            const subjectWithPrereq = subjects.find((ss) =>\r\n                ss.prerequisites.includes(subject.code)\r\n            );\r\n\r\n            if (subjectWithPrereq) {\r\n                // if true, then recursively execute function to find other subjects in the chain\r\n                onSubjectSelected(subjectWithPrereq, subjectsToRemove);\r\n            } else {\r\n                // if false, then no more subjects in the chain left, start removing\r\n                temp = subjects.filter(\r\n                    (ss) => !subjectsToRemove.includes(ss.code)\r\n                );\r\n\r\n                setSelectedSubjects({\r\n                    ...selectedSubjects,\r\n                    [selectedCarreer.pensumCode]: temp,\r\n                });\r\n            }\r\n        } // Select it\r\n        else {\r\n            temp = subjects.concat(subject);\r\n\r\n            setSelectedSubjects({\r\n                ...selectedSubjects,\r\n                [selectedCarreer.pensumCode]: temp,\r\n            });\r\n        }\r\n    }\r\n\r\n    useEffect(() => {\r\n        localStorage.setItem(\r\n            \"selectedSubjects\",\r\n            JSON.stringify(selectedSubjects)\r\n        );\r\n    }, [selectedCarreer, selectedSubjects]);\r\n\r\n    return (\r\n        <React.Fragment>\r\n            <ThemeProvider theme={darkTheme}>\r\n                <Navbar\r\n                    pensums={pensums}\r\n                    selectedCarreer={selectedCarreer}\r\n                    selectedSubjects={selectedSubjects}\r\n                    onCarreerSelect={onCarreerSelect}\r\n                    setSelectedSubjects={setSelectedSubjects}\r\n                />\r\n\r\n                <Container fixed className=\"App\">\r\n                    <MainContent\r\n                        selectedCarreer={selectedCarreer}\r\n                        selectedSubjects={selectedSubjects}\r\n                        onSubjectSelected={onSubjectSelected}\r\n                        onSubjectSelectedBulk={handleBulkSelect}\r\n                    />\r\n\r\n                    <Footer />\r\n                </Container>\r\n            </ThemeProvider>\r\n        </React.Fragment>\r\n    );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}