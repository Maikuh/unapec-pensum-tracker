{"version":3,"sources":["components/Footer.tsx","contexts/selectedCareer.context.tsx","components/SearchBox.tsx","contexts/importExportContext.tsx","components/Navbar.tsx","pensum-pages.ts","components/InfoCard.tsx","helpers/prerequisitesMet.ts","helpers/getSubjectsThatCanBeSelected.ts","components/AlertDialog.tsx","helpers/getAllPrerequisiteSubjects.ts","helpers/getSelectedSubjectsInLocalStorage.ts","contexts/selectedSubjects.context.tsx","components/CuatriTable.tsx","components/MainContent.tsx","components/BackToTop.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["Footer","className","Divider","style","flexGrow","marginBottom","marginTop","Link","href","target","SelectedCareerStateContext","React","createContext","undefined","SelectedCareerDispatchContext","selectedCareerReducer","state","action","type","payload","Error","SelectedCareerProvider","children","useReducer","carreerName","totalCredits","pensumCode","cuatris","date","dispatch","Provider","value","useSelectedCareerState","context","useContext","useSelectedCareerDispatch","useSelectedCareer","SearchBox","pensums","selectedCareer","selectedCareerDispatch","useState","map","pensum","searchBoxOptions","searchBoxValue","setSearchBoxValue","onCareerSelect","useCallback","career","localStorage","setItem","JSON","stringify","removeItem","find","p","rest","useEffect","lastSelectedCareer","getItem","parse","classes","makeStyles","theme","searchBoxContainer","justifyContent","maxWidth","minWidth","breakpoints","down","marginLeft","searchBox","useStyles","Grid","container","direction","justify","alignItems","item","width","Autocomplete","id","autoComplete","autoHighlight","selectOnFocus","options","getOptionLabel","c","onChange","e","renderInput","params","TextField","label","variant","autoFocus","getOptionSelected","option","ImportExportStateContext","ImportExportDispatchContext","importExportReducer","randomNumber","Math","floor","random","toString","savedSelectedSubjects","alert","dataUri","encodeURIComponent","linkElement","document","createElement","setAttribute","click","setTimeout","remove","ImportExportProvider","useImportExportState","useImportExportDispatch","useImportExport","Navbar","importExportDispatch","fileInputRef","createRef","drawerOpen","setDrawerOpen","useTheme","exportToJsonFile","clickImportFromJsonInput","current","HideOnScroll","window","trigger","useScrollTrigger","Slide","appear","in","root","drawer","up","flexShrink","drawerPaper","menuButton","marginRight","spacing","toolbar","minHeight","paddingTop","paddingBottom","title","alignSelf","display","drawerContainer","flexDirection","height","drawerList","drawerFooter","padding","textAlign","mobileTitle","sectionRight","Typography","List","text","index","link","icon","ListItem","button","component","key","onClick","ListItemIcon","ListItemText","primary","body","Fragment","CssBaseline","AppBar","color","Toolbar","IconButton","aria-label","edge","fontSize","Tooltip","ref","uploadedFile","files","length","reader","FileReader","onload","event","fileContents","result","readAsText","importFromJsonFile","Hidden","smUp","implementation","Drawer","anchor","open","onClose","paper","ModalProps","keepMounted","xsDown","InfoCard","creditsCount","subjectsCount","totalSubjects","originalPensumLink","setOriginalPensumLink","pensumPages","toUpperCase","includes","split","pop","alignContent","xs","md","Card","CardContent","gutterBottom","ListItemAvatar","Avatar","secondary","Date","toLocaleDateString","hour12","weekday","year","day","month","round","prerequisitesMet","subject","selectedSubjects","prerequisites","every","Number","slice","s","code","newSelectedSubjects","subjectsThatCanBeSelected","push","AlertDialog","props","setOpen","handleClose","close","Dialog","aria-labelledby","aria-describedby","DialogTitle","DialogContent","DialogContentText","message","DialogActions","Button","getAllPrerequisiteSubjects","subjects","lastFoundSubject","lastSubjectsToRemove","subjectsWithPrereq","filter","SelectedSubjectsStateContext","SelectedSubjectsDispatchContext","selectedSubjectsReducer","importedSelectedSubjects","temp","console","error","subjectsToRemove","some","selectedSubject","subjectToRemove","Set","ss","concat","periodSubjectsCount","checkboxStatus","notInSelectedSubjects","newSelectedSubject","forEach","nss","SelectedSubjectsProvider","defaultSelectedSubjects","pensumsJson","Object","keys","getSelectedSubjectsInLocalStorage","importExportState","strImportRandomNumber","useSelectedSubjectsState","useSelectedSubjectsDispatch","useSelectedSubjects","CuatriTable","cuatri","selectedSubjectsDispatch","setCheckboxStatus","isMobileBreakpoint","useMediaQuery","enabled","alertDialog","setAlertDialog","getSubjectNameFromPrereq","prereq","flat","name","selectedSubjectsChecked","getSubjectsThatCanBeSelected","HtmlTooltip","withStyles","tooltip","backgroundColor","border","TableContainer","Paper","flex","period","Table","size","TableHead","TableRow","TableCell","Checkbox","indeterminate","checked","disabled","inputProps","align","TableBody","row","hover","selected","scope","credits","pr","MainContent","isMobileScreen","reduce","acc","acc2","role","position","bottom","right","ScrollTop","disableHysteresis","threshold","Zoom","ownerDocument","querySelector","scrollIntoView","behavior","block","BackToTop","Fab","App","darkTheme","createMuiTheme","palette","ThemeProvider","Container","fixed","Boolean","location","hostname","match","ReactDOM","render","StrictMode","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch"],"mappings":"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","file":"static/js/main.012b2c6c.chunk.js","sourcesContent":["import React from \"react\";\nimport { Divider, Link } from \"@material-ui/core\";\n\nexport const Footer = () => {\n    return (\n        <div className=\"footer-container\">\n            <Divider\n                style={{\n                    flexGrow: 1,\n                    marginBottom: \"2em\",\n                    marginTop: \"2em\",\n                }}\n            />\n\n            <footer>\n                &copy; Miguel Araujo{\" \"}\n                <Link href=\"https://github.com/maikuh\" target=\"_blank\">\n                    GitHub\n                </Link>{\" \"}\n                /{\" \"}\n                <Link href=\"https://gitlab.com/maikuh\" target=\"_blank\">\n                    GitLab\n                </Link>\n            </footer>\n        </div>\n    );\n};\n","import React from \"react\";\nimport { Pensum } from \"../interfaces/pensums.interface\";\n\ntype SelectedCareerAction = {\n    type: \"select-career\";\n    payload: Pensum;\n};\n\ntype SelectedCareerDispatch = (action: SelectedCareerAction) => void;\n\nconst SelectedCareerStateContext = React.createContext<Pensum | undefined>(\n    undefined\n);\n\nconst SelectedCareerDispatchContext = React.createContext<\n    SelectedCareerDispatch | undefined\n>(undefined);\n\nfunction selectedCareerReducer(state: Pensum, action: SelectedCareerAction) {\n    switch (action.type) {\n        case \"select-career\": {\n            return { ...action.payload };\n        }\n        default: {\n            throw new Error(`Unhandled action type: ${action.type}`);\n        }\n    }\n}\n\nfunction SelectedCareerProvider({ children }: { children: React.ReactNode }) {\n    const [state, dispatch] = React.useReducer(selectedCareerReducer, {\n        carreerName: \"\",\n        totalCredits: 0,\n        pensumCode: \"\",\n        cuatris: [],\n        date: \"\",\n    });\n\n    return (\n        <SelectedCareerStateContext.Provider value={state}>\n            <SelectedCareerDispatchContext.Provider value={dispatch}>\n                {children}\n            </SelectedCareerDispatchContext.Provider>\n        </SelectedCareerStateContext.Provider>\n    );\n}\n\nfunction useSelectedCareerState() {\n    const context = React.useContext(SelectedCareerStateContext);\n    if (context === undefined) {\n        throw new Error(\n            \"useSelectedCareerState must be used within a SelectedCareerProvider\"\n        );\n    }\n    return context;\n}\n\nfunction useSelectedCareerDispatch() {\n    const context = React.useContext(SelectedCareerDispatchContext);\n    if (context === undefined) {\n        throw new Error(\n            \"useSelectedCareerDispatch must be used within a SelectedCareerProvider\"\n        );\n    }\n    return context;\n}\n\nfunction useSelectedCareer(): [Pensum, SelectedCareerDispatch] {\n    return [useSelectedCareerState(), useSelectedCareerDispatch()];\n}\n\nexport { SelectedCareerProvider, useSelectedCareer };\n","import React, { useEffect, useState, useCallback } from \"react\";\nimport { Grid, TextField, makeStyles } from \"@material-ui/core\";\nimport { Autocomplete } from \"@material-ui/lab\";\nimport { SearchBoxProps } from \"../interfaces/props.interface\";\nimport { useSelectedCareer } from \"../contexts/selectedCareer.context\";\n\nexport const SearchBox = ({ pensums }: SearchBoxProps) => {\n    const [selectedCareer, selectedCareerDispatch] = useSelectedCareer();\n    const [searchBoxOptions] = useState(\n        pensums.map((pensum) => {\n            const { cuatris, totalCredits, date, ...rest } = pensum;\n            return rest;\n        })\n    );\n    const [searchBoxValue, setSearchBoxValue] = useState<{\n        pensumCode: string;\n        carreerName: string;\n    } | null>(null);\n\n    const onCareerSelect = useCallback(\n        (career: any) => {\n            if (career) {\n                localStorage.setItem(\n                    \"lastSelectedCareer\",\n                    JSON.stringify(career)\n                );\n            } else {\n                localStorage.removeItem(\"lastSelectedCareer\");\n            }\n\n            const pensum = career\n                ? pensums.find((p) => p.pensumCode === career.pensumCode)\n                : null;\n            selectedCareerDispatch({ type: \"select-career\", payload: pensum! });\n\n            if (pensum) {\n                const { cuatris, totalCredits, date, ...rest } = pensum;\n                setSearchBoxValue(rest);\n            } else setSearchBoxValue(null);\n        },\n        [pensums, selectedCareerDispatch]\n    );\n\n    useEffect(() => {\n        if (!selectedCareer || !selectedCareer.pensumCode) {\n            const lastSelectedCareer = localStorage.getItem(\n                \"lastSelectedCareer\"\n            );\n\n            if (lastSelectedCareer)\n                onCareerSelect(JSON.parse(lastSelectedCareer));\n        } else {\n            const { cuatris, totalCredits, date, ...rest } = selectedCareer;\n            setSearchBoxValue(rest);\n        }\n    }, [selectedCareer, onCareerSelect]);\n\n    const useStyles = makeStyles((theme) => ({\n        searchBoxContainer: {\n            justifyContent: \"center\",\n            marginTop: \"auto\",\n            marginBottom: \"auto\",\n            maxWidth: \"50%\",\n            minWidth: \"600px\",\n            [theme.breakpoints.down(\"sm\")]: {\n                justifyContent: \"end\",\n                marginLeft: \"auto\",\n                minWidth: \"512px\",\n            },\n            [theme.breakpoints.down(\"xs\")]: {\n                minWidth: \"320px\",\n            },\n        },\n        searchBox: {},\n    }));\n\n    const classes = useStyles();\n\n    return (\n        <Grid\n            className={classes.searchBoxContainer}\n            container\n            direction=\"row\"\n            justify=\"center\"\n            alignItems=\"center\"\n        >\n            <Grid item style={{ width: \"100%\" }}>\n                <Autocomplete\n                    id=\"carreer-search-box\"\n                    autoComplete\n                    autoHighlight\n                    selectOnFocus\n                    options={searchBoxOptions}\n                    getOptionLabel={(c: any) =>\n                        `${c.pensumCode} - ${c.carreerName}`\n                    }\n                    value={searchBoxValue}\n                    className={classes.searchBox}\n                    onChange={(e: any, value: any) => onCareerSelect(value)}\n                    renderInput={(params) => (\n                        <TextField\n                            {...params}\n                            label=\"Elegir Carrera\"\n                            variant=\"outlined\"\n                            autoFocus\n                        />\n                    )}\n                    getOptionSelected={(option, value) => {\n                        if (\n                            option.pensumCode === value.pensumCode &&\n                            option.carreerName === value.carreerName\n                        )\n                            return true;\n                        else return false;\n                    }}\n                />\n            </Grid>\n        </Grid>\n    );\n};\n","import React from \"react\";\n\ntype ImportExportAction = {\n    type: \"import\" | \"export\";\n};\n\ntype ImportExportDispatch = (action: ImportExportAction) => void;\n\nconst ImportExportStateContext = React.createContext<number>(0);\n\nconst ImportExportDispatchContext = React.createContext<\n    ImportExportDispatch | undefined\n>(undefined);\n\nfunction importExportReducer(state: number, action: ImportExportAction) {\n    switch (action.type) {\n        case \"import\": {\n            const randomNumber = Math.floor(Math.random() * 10000) + 1\n            localStorage.setItem(\"importRandomNumber\", randomNumber.toString())\n            return randomNumber;\n        }\n        case \"export\": {\n            const savedSelectedSubjects = localStorage.getItem(\n                \"selectedSubjects\"\n            );\n\n            if (!savedSelectedSubjects) {\n                alert(\n                    \"No hay datos para exportar. Por favor seleccione una carrera y al menos 1 asignatura.\"\n                );\n                return state;\n            }\n\n            let dataStr = savedSelectedSubjects;\n            let dataUri =\n                \"data:application/json;charset=utf-8,\" +\n                encodeURIComponent(dataStr);\n\n            let exportFileDefaultName = \"uptracker.json\";\n\n            let linkElement = document.createElement(\"a\");\n            linkElement.setAttribute(\"href\", dataUri);\n            linkElement.setAttribute(\"download\", exportFileDefaultName);\n            linkElement.click();\n\n            setTimeout(() => {\n                linkElement.remove();\n            }, 5000);\n\n            return state;\n        }\n        default: {\n            throw new Error(`Unhandled action type: ${action.type}`);\n        }\n    }\n}\n\nfunction ImportExportProvider({ children }: { children: React.ReactNode }) {\n    const [state, dispatch] = React.useReducer(importExportReducer, 0);\n\n    return (\n        <ImportExportStateContext.Provider value={state}>\n            <ImportExportDispatchContext.Provider value={dispatch}>\n                {children}\n            </ImportExportDispatchContext.Provider>\n        </ImportExportStateContext.Provider>\n    );\n}\n\nfunction useImportExportState() {\n    const context = React.useContext(ImportExportStateContext);\n    if (context === undefined) {\n        throw new Error(\n            \"useImportExportState must be used within a ImportExportProvider\"\n        );\n    }\n    return context;\n}\n\nfunction useImportExportDispatch() {\n    const context = React.useContext(ImportExportDispatchContext);\n    if (context === undefined) {\n        throw new Error(\n            \"useImportExportDispatch must be used within a ImportExportProvider\"\n        );\n    }\n    return context;\n}\n\nfunction useImportExport(): [number, ImportExportDispatch] {\n    return [useImportExportState(), useImportExportDispatch()];\n}\n\nexport { ImportExportProvider, useImportExport };\n","import React, { createRef, ChangeEvent, useState } from \"react\";\nimport {\n    CssBaseline,\n    Toolbar,\n    Typography,\n    IconButton,\n    Tooltip,\n    AppBar,\n    useScrollTrigger,\n    Slide,\n    makeStyles,\n    Hidden,\n    Drawer,\n    Divider,\n    List,\n    ListItem,\n    ListItemIcon,\n    ListItemText,\n    useTheme,\n    Link,\n} from \"@material-ui/core\";\nimport {\n    Github as GithubIcon,\n    Gitlab as GitlabIcon,\n    Download as DownloadIcon,\n    Upload as UploadIcon,\n    Menu as MenuIcon,\n} from \"mdi-material-ui\";\nimport { SearchBox } from \"./SearchBox\";\nimport { NavbarProps } from \"../interfaces/props.interface\";\nimport { useImportExport } from \"../contexts/importExportContext\";\n\nexport const Navbar = ({ pensums }: NavbarProps) => {\n    const [, importExportDispatch] = useImportExport();\n    const fileInputRef = createRef<HTMLInputElement>();\n    const [drawerOpen, setDrawerOpen] = useState(false);\n    const theme = useTheme();\n\n    function exportToJsonFile() {\n        importExportDispatch({ type: \"export\" })\n    }\n\n    function clickImportFromJsonInput() {\n        if (fileInputRef && fileInputRef.current) {\n            fileInputRef.current.click();\n        }\n    }\n\n    function importFromJsonFile(e: ChangeEvent<HTMLInputElement>) {\n        const uploadedFile =\n            e.target &&\n            e.target.files &&\n            e.target.files.length > 0 &&\n            e.target.files[0];\n\n        if (uploadedFile && uploadedFile.type === \"application/json\") {\n            const reader = new FileReader();\n\n            reader.onload = (event: any) => {\n                const fileContents = event.target.result;\n                localStorage.setItem(\"selectedSubjects\", fileContents);\n                importExportDispatch({ type: \"import\" })\n            };\n\n            reader.readAsText(uploadedFile);\n        } else {\n            alert(\"Por favor seleccione un archivo valido\");\n        }\n    }\n\n    function HideOnScroll(params: any) {\n        const { children, window } = params;\n        const trigger = useScrollTrigger({\n            target: window ? window() : undefined,\n        });\n\n        return (\n            <Slide appear={false} direction=\"down\" in={!trigger}>\n                {children}\n            </Slide>\n        );\n    }\n\n    const drawerWidth = 240;\n\n    const useStyles = makeStyles((theme) => ({\n        root: {\n            flexGrow: 1,\n        },\n        drawer: {\n            [theme.breakpoints.up(\"sm\")]: {\n                width: drawerWidth,\n                flexShrink: 0,\n            },\n        },\n        drawerPaper: {\n            width: drawerWidth,\n        },\n        menuButton: {\n            marginRight: theme.spacing(2),\n            // [theme.breakpoints.up(\"md\")]: {\n            //     display: \"none\",\n            // },\n        },\n        toolbar: {\n            minHeight: 128,\n            alignItems: \"center\",\n            paddingTop: theme.spacing(1),\n            paddingBottom: theme.spacing(1),\n        },\n        title: {\n            flexGrow: 1,\n            alignSelf: \"center\",\n            [theme.breakpoints.down(\"sm\")]: {\n                display: \"none\",\n            },\n        },\n        drawerContainer: {\n            display: \"flex\",\n            flexDirection: \"column\",\n            height: \"100%\",\n        },\n        drawerList: {\n            flexGrow: 1,\n        },\n        drawerFooter: {\n            alignSelf: \"center\",\n            padding: \"1em\",\n            textAlign: \"center\",\n        },\n        mobileTitle: {\n            alignSelf: \"center\",\n            padding: \"1em\",\n        },\n        sectionRight: {\n            flexGrow: 1,\n            alignSelf: \"center\",\n            textAlign: \"right\",\n            [theme.breakpoints.down(\"sm\")]: {\n                display: \"none\",\n            },\n        },\n    }));\n\n    const classes = useStyles();\n\n    const drawer = (\n        <div className={classes.drawerContainer}>\n            <Typography className={classes.mobileTitle} variant=\"h5\">\n                UNAPEC Pensum Tracker\n            </Typography>\n            <Divider />\n            <List className={classes.drawerList}>\n                {[\n                    \"GitHub Repo\",\n                    \"GitLab Repo\",\n                    \"Exportar datos\",\n                    \"Importar datos\",\n                ].map((text, index) => {\n                    let link, icon;\n\n                    switch (index) {\n                        case 0:\n                            link =\n                                \"https://github.com/maikuh/unapec-pensum-tracker\";\n                            icon = <GithubIcon />;\n                            break;\n                        case 1:\n                            link =\n                                \"https://gitlab.com/maikuh/unapec-pensum-tracker\";\n                            icon = <GitlabIcon />;\n                            break;\n                        case 2:\n                            icon = <DownloadIcon />;\n                            break;\n                        case 3:\n                            icon = <UploadIcon />;\n                            break;\n                        default:\n                            break;\n                    }\n\n                    return (\n                        <ListItem\n                            button\n                            component=\"a\"\n                            key={text}\n                            onClick={() =>\n                                index === 2\n                                    ? exportToJsonFile()\n                                    : index === 3\n                                    ? clickImportFromJsonInput()\n                                    : null\n                            }\n                            href={link}\n                            target=\"_blank\"\n                        >\n                            <ListItemIcon>{icon}</ListItemIcon>\n                            <ListItemText primary={text} />\n                        </ListItem>\n                    );\n                })}\n            </List>\n\n            <div className={classes.drawerFooter}>\n                <Typography variant=\"body1\">by Miguel Araujo</Typography>\n                <Typography variant=\"body2\">\n                    <Link href=\"https://github.com/maikuh\" target=\"_blank\">\n                        GitHub\n                    </Link>{\" \"}\n                    /{\" \"}\n                    <Link href=\"https://gitlab.com/maikuh\" target=\"_blank\">\n                        GitLab\n                    </Link>\n                </Typography>\n            </div>\n        </div>\n    );\n\n    const container =\n        window !== undefined ? () => window.document.body : undefined;\n\n    return (\n        <React.Fragment>\n            <CssBaseline />\n\n            <HideOnScroll>\n                <AppBar color=\"default\">\n                    <Toolbar className={classes.toolbar}>\n                        <IconButton\n                            color=\"inherit\"\n                            aria-label=\"open drawer\"\n                            edge=\"start\"\n                            onClick={() => setDrawerOpen(!drawerOpen)}\n                            className={classes.menuButton}\n                        >\n                            <MenuIcon fontSize=\"large\" />\n                        </IconButton>\n\n                        <Typography className={classes.title} variant=\"h5\">\n                            UNAPEC Pensum Tracker\n                        </Typography>\n\n                        <SearchBox pensums={pensums} />\n\n                        <div className={classes.root}></div>\n\n                        <div className={classes.sectionRight}>\n                            <Tooltip title=\"GitHub Repo\">\n                                <IconButton\n                                    href=\"https://github.com/maikuh/unapec-pensum-tracker\"\n                                    target=\"_blank\"\n                                >\n                                    <GithubIcon style={{ fontSize: 32 }} />\n                                </IconButton>\n                            </Tooltip>\n\n                            <Tooltip title=\"GitLab Repo\">\n                                <IconButton\n                                    href=\"https://gitlab.com/maikuh/unapec-pensum-tracker\"\n                                    target=\"_blank\"\n                                >\n                                    <GitlabIcon style={{ fontSize: 32 }} />\n                                </IconButton>\n                            </Tooltip>\n\n                            <Tooltip title=\"Exportar datos a archivo\">\n                                <IconButton onClick={() => exportToJsonFile()}>\n                                    <DownloadIcon />\n                                </IconButton>\n                            </Tooltip>\n\n                            <Tooltip title=\"Importar datos de archivo\">\n                                <IconButton\n                                    onClick={() => clickImportFromJsonInput()}\n                                >\n                                    <UploadIcon />\n                                </IconButton>\n                            </Tooltip>\n\n                            <input\n                                type=\"file\"\n                                ref={fileInputRef}\n                                style={{ display: \"none\" }}\n                                onChange={(e) => importFromJsonFile(e)}\n                            />\n                        </div>\n                    </Toolbar>\n                </AppBar>\n            </HideOnScroll>\n\n            <nav className={classes.drawer} aria-label=\"mailbox folders\">\n                {/* The implementation can be swapped with js to avoid SEO duplication of links. */}\n                <Hidden smUp implementation=\"css\">\n                    <Drawer\n                        container={container}\n                        variant=\"temporary\"\n                        anchor={theme.direction === \"rtl\" ? \"right\" : \"left\"}\n                        open={drawerOpen}\n                        onClose={() => setDrawerOpen(!drawerOpen)}\n                        classes={{\n                            paper: classes.drawerPaper,\n                        }}\n                        ModalProps={{\n                            keepMounted: true, // Better open performance on mobile.\n                        }}\n                    >\n                        {drawer}\n                    </Drawer>\n                </Hidden>\n                <Hidden xsDown implementation=\"css\">\n                    <Drawer\n                        classes={{\n                            paper: classes.drawerPaper,\n                        }}\n                        variant=\"temporary\"\n                        open={drawerOpen}\n                        onClose={() => setDrawerOpen(!drawerOpen)}\n                    >\n                        {drawer}\n                    </Drawer>\n                </Hidden>\n            </nav>\n\n            <Toolbar id=\"back-to-top-anchor\" />\n        </React.Fragment>\n    );\n};\n","export default [\n    \"https://servicios.unapec.edu.do/pensum/Main/Detalles/ADM\",\n    \"https://servicios.unapec.edu.do/pensum/Main/Detalles/ATH\",\n    \"https://servicios.unapec.edu.do/pensum/Main/Detalles/CDG10\",\n    \"https://servicios.unapec.edu.do/pensum/Main/Detalles/CON\",\n    \"https://servicios.unapec.edu.do/pensum/Main/Detalles/DEr\",\n    \"https://servicios.unapec.edu.do/pensum/Main/Detalles/DIG\",\n    \"https://servicios.unapec.edu.do/pensum/Main/Detalles/DIN\",\n    \"https://servicios.unapec.edu.do/pensum/Main/Detalles/FIN\",\n    \"https://servicios.unapec.edu.do/pensum/Main/Detalles/IEL\",\n    \"https://servicios.unapec.edu.do/pensum/Main/Detalles/IND\",\n    \"https://servicios.unapec.edu.do/pensum/Main/Detalles/INE\",\n    \"https://servicios.unapec.edu.do/pensum/Main/Detalles/ISC\",\n    \"https://servicios.unapec.edu.do/pensum/Main/Detalles/ISO\",\n    \"https://servicios.unapec.edu.do/pensum/Main/Detalles/LES11\",\n    \"https://servicios.unapec.edu.do/pensum/Main/Detalles/LIE11\",\n    \"https://servicios.unapec.edu.do/pensum/Main/Detalles/LMS11\",\n    \"https://servicios.unapec.edu.do/pensum/Main/Detalles/MER\",\n    \"https://servicios.unapec.edu.do/pensum/Main/Detalles/NIN\",\n    \"https://servicios.unapec.edu.do/pensum/Main/Detalles/PUB\",\n    \"https://servicios.unapec.edu.do/pensum/Main/Detalles/TAF\",\n];\n","import React, { useEffect, useState } from \"react\";\nimport {\n    List,\n    ListItem,\n    ListItemAvatar,\n    Avatar,\n    ListItemText,\n    Grid,\n    Typography,\n    Card,\n    CardContent,\n    Link,\n} from \"@material-ui/core\";\nimport {\n    FileDocumentOutline as FileDocumentIcon,\n    CreditCardOutline as CreditIcon,\n    Calendar as CalendarIcon,\n    OpenInNew as OpenInNewIcon,\n} from \"mdi-material-ui\";\nimport { InfoCardProps } from \"../interfaces/props.interface\";\nimport pensumPages from \"../pensum-pages\";\n\nexport const InfoCard = ({\n    date,\n    pensumCode,\n    creditsCount,\n    totalCredits,\n    subjectsCount,\n    totalSubjects,\n}: InfoCardProps) => {\n    const [originalPensumLink, setOriginalPensumLink] = useState<String>(\"\");\n\n    useEffect(() => {\n        setOriginalPensumLink(\n            pensumPages.find((p) =>\n                pensumCode\n                    .toUpperCase()\n                    .includes(p.split(\"/\").pop()!.toUpperCase())\n            )!\n        );\n    }, [pensumCode, originalPensumLink]);\n\n    return (\n        <Grid\n            container\n            justify=\"center\"\n            alignContent=\"center\"\n            alignItems=\"center\"\n            className=\"info-card\"\n        >\n            <Grid item xs={12} md={6}>\n                <Card>\n                    <CardContent>\n                        <Typography gutterBottom variant=\"h5\" component=\"h2\">\n                            Informacion\n                        </Typography>\n\n                        <List>\n                            <ListItem>\n                                <ListItemAvatar>\n                                    <Avatar>\n                                        <CalendarIcon />\n                                    </Avatar>\n                                </ListItemAvatar>\n                                <ListItemText\n                                    primary=\"Fecha del Pensum\"\n                                    secondary={new Date(\n                                        date\n                                    ).toLocaleDateString(\"es-MX\", {\n                                        hour12: true,\n                                        weekday: \"long\",\n                                        year: \"numeric\",\n                                        day: \"2-digit\",\n                                        month: \"long\",\n                                    })}\n                                />\n                            </ListItem>\n                            <ListItem>\n                                <ListItemAvatar>\n                                    <Avatar>\n                                        <FileDocumentIcon />\n                                    </Avatar>\n                                </ListItemAvatar>\n                                <ListItemText\n                                    primary=\"Materias\"\n                                    secondary={\n                                        <Typography\n                                            variant=\"body2\"\n                                            color=\"textSecondary\"\n                                        >\n                                            <span className=\"subjects-count\">\n                                                {subjectsCount}\n                                            </span>\n                                            > (\n                                            <span className=\"subject-credits-percentage\">\n                                                {Math.round(\n                                                    (subjectsCount /\n                                                        totalSubjects) *\n                                                        100\n                                                )}\n                                                %\n                                            </span>\n                                            ) de{\" \"}\n                                            <span className=\"total-subjects\">\n                                                {totalSubjects}\n                                            </span>\n                                        </Typography>\n                                    }\n                                />\n                            </ListItem>\n                            <ListItem>\n                                <ListItemAvatar>\n                                    <Avatar>\n                                        <CreditIcon />\n                                    </Avatar>\n                                </ListItemAvatar>\n                                <ListItemText\n                                    primary=\"Creditos\"\n                                    secondary={\n                                        <Typography\n                                            variant=\"body2\"\n                                            color=\"textSecondary\"\n                                        >\n                                            <span className=\"credits-count\">\n                                                {creditsCount}\n                                            </span>{\" \"}\n                                            (\n                                            <span className=\"subject-credits-percentage\">\n                                                {Math.round(\n                                                    (creditsCount /\n                                                        totalCredits) *\n                                                        100\n                                                )}\n                                                %\n                                            </span>\n                                            ) de{\" \"}\n                                            <span className=\"total-credits\">\n                                                {totalCredits}\n                                            </span>\n                                        </Typography>\n                                    }\n                                />\n                            </ListItem>\n\n                            <ListItem>\n                                <ListItemAvatar>\n                                    <Avatar>\n                                        <OpenInNewIcon />\n                                    </Avatar>\n                                </ListItemAvatar>\n                                <ListItemText\n                                    primary=\"Pensum Original\"\n                                    secondary={\n                                        <Link\n                                            href={`${originalPensumLink}`}\n                                            target=\"_blank\"\n                                        >\n                                            Link al Pensum\n                                        </Link>\n                                    }\n                                />\n                            </ListItem>\n                        </List>\n                    </CardContent>\n                </Card>\n            </Grid>\n        </Grid>\n    );\n};\n","import { Subject } from \"../interfaces/pensums.interface\";\n\nexport default function prerequisitesMet(\n    subject: Subject,\n    selectedSubjects: Subject[],\n    creditsCount: number,\n    totalCredits: number\n) {\n    let isMet: boolean =\n        subject.prerequisites.length === 0\n            ? true\n            : subject.prerequisites.every((p: string) =>\n                  p.includes(\"%\")\n                      ? Math.round((creditsCount / totalCredits) * 100) >=\n                        Number(p.slice(0, 2))\n                      : selectedSubjects.map((s: any) => s.code).includes(p)\n              );\n\n    return isMet;\n}\n","import { Subject } from \"../interfaces/pensums.interface\";\nimport prerequisitesMet from \"./prerequisitesMet\";\n\nexport default function (\n    newSelectedSubjects: Subject[],\n    selectedSubjects: Subject[],\n    creditsCount: number,\n    totalCredits: number\n) {\n    const subjectsThatCanBeSelected = [];\n\n    for (const subject of newSelectedSubjects) {\n        if (\n            prerequisitesMet(\n                subject,\n                selectedSubjects,\n                creditsCount,\n                totalCredits\n            )\n        )\n            subjectsThatCanBeSelected.push(subject);\n    }\n\n    return subjectsThatCanBeSelected;\n}\n","import React, { useState } from \"react\";\nimport Button from \"@material-ui/core/Button\";\nimport Dialog from \"@material-ui/core/Dialog\";\nimport DialogActions from \"@material-ui/core/DialogActions\";\nimport DialogContent from \"@material-ui/core/DialogContent\";\nimport DialogContentText from \"@material-ui/core/DialogContentText\";\nimport DialogTitle from \"@material-ui/core/DialogTitle\";\n\nexport default function AlertDialog(props: any) {\n    const [open, setOpen] = useState(true);\n\n    const handleClose = () => {\n        setOpen(false);\n        props.close();\n    };\n\n    return (\n        <Dialog\n            open={open}\n            onClose={handleClose}\n            aria-labelledby=\"alert-dialog-title\"\n            aria-describedby=\"alert-dialog-description\"\n        >\n            <DialogTitle id=\"alert-dialog-title\">{props.title}</DialogTitle>\n            <DialogContent>\n                <DialogContentText id=\"alert-dialog-description\">\n                    {props.message}\n                </DialogContentText>\n            </DialogContent>\n            <DialogActions>\n                <Button onClick={handleClose} color=\"primary\" autoFocus>\n                    Okay\n                </Button>\n            </DialogActions>\n        </Dialog>\n    );\n}\n","import { Subject } from \"../interfaces/pensums.interface\";\n\nexport function getAllPrerequisiteSubjects(\n    subjects: Subject[],\n    lastFoundSubject: string,\n    lastSubjectsToRemove: string[]\n): string[] {\n    const subjectsWithPrereq = subjects\n        .filter((subject) => subject.prerequisites.includes(lastFoundSubject))\n        .map((subject) => subject.code);\n\n    if (subjectsWithPrereq.length > 0)\n        lastSubjectsToRemove.push(...subjectsWithPrereq);\n\n    return lastSubjectsToRemove;\n}\n","import { SelectedSubjects } from \"../interfaces/selectedSubjects.interface\";\nimport { Pensum } from \"../interfaces/pensums.interface\";\n\nexport default function (pensumsJson?: Pensum[]) {\n    const savedSelectedSubjects = localStorage.getItem(\"selectedSubjects\");\n    const defaultSelectedSubjects: SelectedSubjects = savedSelectedSubjects\n        ? JSON.parse(savedSelectedSubjects)\n        : {};\n\n    if (pensumsJson && Object.keys(defaultSelectedSubjects).length === 0) {\n        for (const pensum of pensumsJson) {\n            defaultSelectedSubjects[pensum.pensumCode] = [];\n        }\n    }\n\n    return defaultSelectedSubjects;\n}\n","import React, { useEffect } from \"react\";\nimport { SelectedSubjects } from \"../interfaces/selectedSubjects.interface\";\nimport { getAllPrerequisiteSubjects } from \"../helpers/getAllPrerequisiteSubjects\";\nimport pensumsJson from \"../pensums.json\";\nimport { Subject } from \"../interfaces/pensums.interface\";\nimport { useImportExport } from \"./importExportContext\";\nimport getSelectedSubjectsInLocalStorage from \"../helpers/getSelectedSubjectsInLocalStorage\";\n\ntype ActionMap<M extends { [index: string]: any }> = {\n    [Key in keyof M]: M[Key] extends undefined\n        ? {\n              type: Key;\n          }\n        : {\n              type: Key;\n              payload: M[Key];\n          };\n};\n\ntype SelectedSubjectsPayload = {\n    \"select-subject\": {\n        pensumCode: string;\n        subject: Subject;\n    };\n    \"bulk-select\": {\n        pensumCode: string;\n        newSelectedSubjects: Subject[];\n        periodSubjectsCount: number;\n        checkboxStatus: \"unchecked\" | \"indeterminate\" | \"checked\" | \"disabled\";\n    };\n    \"import-from-file\": {\n        importedSelectedSubjects: SelectedSubjects;\n    };\n};\n\ntype SelectedSubjectsAction = ActionMap<\n    SelectedSubjectsPayload\n>[keyof ActionMap<SelectedSubjectsPayload>];\n\ntype SelectedSubjectsDispatch = (action: SelectedSubjectsAction) => void;\n\nconst SelectedSubjectsStateContext = React.createContext<\n    SelectedSubjects | undefined\n>(undefined);\n\nconst SelectedSubjectsDispatchContext = React.createContext<\n    SelectedSubjectsDispatch | undefined\n>(undefined);\n\nfunction selectedSubjectsReducer(\n    state: SelectedSubjects,\n    action: SelectedSubjectsAction\n): SelectedSubjects {\n    switch (action.type) {\n        case \"import-from-file\": {\n            const { importedSelectedSubjects } = action.payload;\n            \n            // Remove the item in localStorage, else there will be a loop since ImportExport's\n            // initial state is 0 and for some reason, parsing \"null\" as a number === 0\n            // Could also be fixed by also making the initial state a random number\n            localStorage.removeItem(\"importRandomNumber\");\n            return importedSelectedSubjects!;\n        }\n        case \"select-subject\": {\n            const { pensumCode, subject } = action.payload;\n\n            if (!pensumCode || !subject) {\n                console.error(\"Missing variables\");\n                return state;\n            }\n\n            // Temporary variable to hold changes\n            let temp: Subject[];\n            const subjects = state[pensumCode];\n            let subjectsToRemove: string[] = [];\n\n            // If subject has already been selected, remove it\n            if (\n                subjects.some(\n                    (selectedSubject: Subject) =>\n                        selectedSubject.code === subject.code\n                )\n            ) {\n                // Add the subject to the removal list\n                subjectsToRemove.push(subject.code);\n\n                for (const subjectToRemove of subjectsToRemove) {\n                    subjectsToRemove = getAllPrerequisiteSubjects(\n                        subjects,\n                        subjectToRemove,\n                        subjectsToRemove\n                    );\n                }\n\n                subjectsToRemove = [...new Set(subjectsToRemove)];\n\n                temp = subjects.filter(\n                    (ss: Subject) => !subjectsToRemove.includes(ss.code)\n                );\n            } // Select it\n            else {\n                temp = subjects.concat(subject);\n            }\n\n            return {\n                ...state,\n                [pensumCode]: temp,\n            };\n        }\n        case \"bulk-select\": {\n            const {\n                pensumCode,\n                newSelectedSubjects,\n                periodSubjectsCount,\n                checkboxStatus\n            } = action.payload;\n\n            if (!pensumCode || !newSelectedSubjects || !periodSubjectsCount) {\n                console.error(\"Missing variables\");\n                return state;\n            }\n\n            const notInSelectedSubjects: Subject[] = [];\n            const subjects = state[pensumCode];\n            let temp: Subject[] = [];\n\n            if (checkboxStatus === \"unchecked\") {\n                temp = subjects.concat(...newSelectedSubjects);\n            } else if (checkboxStatus === \"indeterminate\") {\n                if (newSelectedSubjects.length < periodSubjectsCount) {\n                    let subjectsToRemove = newSelectedSubjects.map(\n                        (newSelectedSubject: Subject) => newSelectedSubject.code\n                    );\n\n                    for (const subjectToRemove of subjectsToRemove) {\n                        subjectsToRemove = getAllPrerequisiteSubjects(\n                            subjects,\n                            subjectToRemove,\n                            subjectsToRemove\n                        );\n                    }\n\n                    subjectsToRemove = [...new Set(subjectsToRemove)];\n\n                    temp = subjects.filter(\n                        (subject: Subject) =>\n                            !subjectsToRemove.includes(subject.code)\n                    );\n                } else {\n                    newSelectedSubjects.forEach(\n                        (newSelectedSubject: Subject) => {\n                            const isInSelectedSubjects = subjects.some(\n                                (subject: Subject) =>\n                                    subject.code === newSelectedSubject.code\n                            );\n\n                            if (!isInSelectedSubjects)\n                                notInSelectedSubjects.push(newSelectedSubject);\n                        }\n                    );\n\n                    temp = subjects.concat(...notInSelectedSubjects);\n                }\n            } else if (checkboxStatus === \"checked\") {\n                let subjectsToRemove = newSelectedSubjects.map(\n                    (nss: Subject) => nss.code\n                );\n\n                for (const subjectToRemove of subjectsToRemove) {\n                    subjectsToRemove = getAllPrerequisiteSubjects(\n                        subjects,\n                        subjectToRemove,\n                        subjectsToRemove\n                    );\n                }\n\n                subjectsToRemove = [...new Set(subjectsToRemove)];\n\n                temp = subjects.filter(\n                    (subject: Subject) =>\n                        !subjectsToRemove.includes(subject.code)\n                );\n            }\n\n            return {\n                ...state,\n                [pensumCode]: temp,\n            };\n        }\n        default: {\n            throw new Error(`Unhandled action type: ${action!.type}`);\n        }\n    }\n}\n\nfunction SelectedSubjectsProvider({ children }: { children: React.ReactNode }) {\n    const defaultSelectedSubjects = getSelectedSubjectsInLocalStorage(\n        pensumsJson\n    );\n\n    let [state, dispatch] = React.useReducer(\n        selectedSubjectsReducer,\n        defaultSelectedSubjects\n    );\n\n    const [importExportState] = useImportExport();\n\n    useEffect(() => {\n        const strImportRandomNumber = localStorage.getItem(\n            \"importRandomNumber\"\n        );\n\n        // This will run everytime the component is re-rendered, specifically as an effect\n        // of the ImportExport Context\n        if (\n            strImportRandomNumber &&\n            importExportState === Number(strImportRandomNumber)\n        ) {\n            dispatch({\n                type: \"import-from-file\",\n                payload: { importedSelectedSubjects: defaultSelectedSubjects },\n            });\n        }\n\n        // This will save the state to localStorage each time there's a change in it\n        localStorage.setItem(\"selectedSubjects\", JSON.stringify(state));\n    });\n\n    return (\n        <>\n            <SelectedSubjectsStateContext.Provider value={state}>\n                <SelectedSubjectsDispatchContext.Provider value={dispatch}>\n                    {children}\n                </SelectedSubjectsDispatchContext.Provider>\n            </SelectedSubjectsStateContext.Provider>\n        </>\n    );\n}\n\nfunction useSelectedSubjectsState() {\n    const context = React.useContext(SelectedSubjectsStateContext);\n    if (context === undefined) {\n        throw new Error(\n            \"useSelectedSubjectsState must be used within a SelectedSubjectsProvider\"\n        );\n    }\n    return context;\n}\n\nfunction useSelectedSubjectsDispatch() {\n    const context = React.useContext(SelectedSubjectsDispatchContext);\n    if (context === undefined) {\n        throw new Error(\n            \"useSelectedSubjectsDispatch must be used within a SelectedSubjectsProvider\"\n        );\n    }\n    return context;\n}\n\nfunction useSelectedSubjects(): [SelectedSubjects, SelectedSubjectsDispatch] {\n    return [useSelectedSubjectsState(), useSelectedSubjectsDispatch()];\n}\n\nexport { SelectedSubjectsProvider, useSelectedSubjects };\n","import React, { useEffect, useState } from \"react\";\nimport {\n    TableContainer,\n    Paper,\n    Table,\n    TableHead,\n    TableRow,\n    TableCell,\n    TableBody,\n    Typography,\n    Toolbar,\n    Checkbox,\n    Tooltip,\n    withStyles,\n    Theme,\n    useTheme,\n    useMediaQuery,\n} from \"@material-ui/core\";\nimport { CuatriTableProps } from \"../interfaces/props.interface\";\nimport { SelectAllCheckboxStatus } from \"../interfaces/checkbox.types\";\nimport getSubjectsThatCanBeSelected from \"../helpers/getSubjectsThatCanBeSelected\";\nimport prerequisitesMet from \"../helpers/prerequisitesMet\";\nimport { Subject } from \"../interfaces/pensums.interface\";\nimport AlertDialog from \"./AlertDialog\";\nimport { useSelectedSubjects } from \"../contexts/selectedSubjects.context\";\n\nexport const CuatriTable = ({\n    cuatri,\n    cuatris,\n    pensumCode,\n    totalCredits,\n    creditsCount,\n}: CuatriTableProps) => {\n    const [selectedSubjects, selectedSubjectsDispatch] = useSelectedSubjects();\n    const [checkboxStatus, setCheckboxStatus] = useState<\n        SelectAllCheckboxStatus\n    >(\"unchecked\");\n    const theme = useTheme();\n    const isMobileBreakpoint = useMediaQuery(theme.breakpoints.down(\"sm\"));\n    const [alertDialog, setAlertDialog] = useState({\n        enabled: false,\n        title: \"\",\n        message: \"\",\n    });\n\n    useEffect(() => {\n        let selectedSubjectsChecked = 0;\n\n        cuatri.subjects.forEach((subject) => {\n            const subjectChecked = selectedSubjects[pensumCode].some(\n                (selectedSubject: Subject) =>\n                    selectedSubject.code === subject.code\n            );\n\n            if (subjectChecked) selectedSubjectsChecked++;\n        });\n\n        if (\n            selectedSubjectsChecked > 0 &&\n            selectedSubjectsChecked < cuatri.subjects.length\n        )\n            setCheckboxStatus(\"indeterminate\");\n        else if (selectedSubjectsChecked === cuatri.subjects.length)\n            setCheckboxStatus(\"checked\");\n        else if (\n            getSubjectsThatCanBeSelected(\n                cuatri.subjects,\n                selectedSubjects[pensumCode],\n                creditsCount,\n                totalCredits\n            ).length === 0\n        )\n            setCheckboxStatus(\"disabled\");\n        else setCheckboxStatus(\"unchecked\");\n    }, [\n        checkboxStatus,\n        cuatri.subjects,\n        selectedSubjects,\n        pensumCode,\n        creditsCount,\n        totalCredits,\n    ]);\n\n    function selectSubject(subject: Subject) {\n        if (\n            prerequisitesMet(\n                subject,\n                selectedSubjects[pensumCode],\n                creditsCount,\n                totalCredits\n            )\n        ) {\n            selectedSubjectsDispatch({\n                type: \"select-subject\",\n                payload: {\n                    subject,\n                    pensumCode,\n                },\n            });\n        } else {\n            setAlertDialog({\n                enabled: true,\n                title: \"No puede seleccionar esta materia\",\n                message:\n                    \"No tienes los prerequisitos completados para seleccionar esta materia.\",\n            });\n        }\n    }\n\n    function getSubjectNameFromPrereq(prereq: string) {\n        const subject = cuatris\n            .map((cuatri: any) => cuatri.subjects)\n            .flat()\n            .find((subject: any) => subject.code === prereq);\n\n        return subject ? subject.name : \"\";\n    }\n\n    function onSelectAllCheckboxClick() {\n        const subjectsThatCanBeSelected = getSubjectsThatCanBeSelected(\n            cuatri.subjects,\n            selectedSubjects[pensumCode],\n            creditsCount,\n            totalCredits\n        );\n\n        selectedSubjectsDispatch({\n            type: \"bulk-select\",\n            payload: {\n                newSelectedSubjects: subjectsThatCanBeSelected,\n                pensumCode,\n                periodSubjectsCount: cuatri.subjects.length,\n                checkboxStatus: checkboxStatus,\n            },\n        });\n    }\n\n    const HtmlTooltip = withStyles((theme: Theme) => ({\n        tooltip: {\n            backgroundColor: \"rgba(245, 0, 87, 0.76)\",\n            color: \"#fafafa\",\n            border: \"1px solid rgba(245, 0, 87, 0.76)\",\n        },\n    }))(Tooltip);\n\n    return (\n        <>\n            {alertDialog.enabled && (\n                <AlertDialog\n                    title={alertDialog.title}\n                    message={alertDialog.message}\n                    close={() =>\n                        setAlertDialog({\n                            enabled: false,\n                            title: \"\",\n                            message: \"\",\n                        })\n                    }\n                />\n            )}\n            <TableContainer component={Paper}>\n                <Toolbar>\n                    <Typography\n                        style={{ flex: \"1 1 100%\" }}\n                        variant=\"h6\"\n                        id=\"tableTitle\"\n                        component=\"div\"\n                    >\n                        Cuatrimestre {cuatri.period}\n                    </Typography>\n                </Toolbar>\n                <Table\n                    aria-label=\"simple table\"\n                    size={isMobileBreakpoint ? \"small\" : \"medium\"}\n                >\n                    <TableHead>\n                        <TableRow>\n                            <TableCell padding=\"checkbox\">\n                                <Checkbox\n                                    indeterminate={\n                                        checkboxStatus === \"indeterminate\"\n                                    }\n                                    checked={checkboxStatus === \"checked\"}\n                                    disabled={checkboxStatus === \"disabled\"}\n                                    onChange={onSelectAllCheckboxClick}\n                                    inputProps={{\n                                        \"aria-label\": \"select all subjects\",\n                                    }}\n                                />\n                            </TableCell>\n                            <TableCell>Código</TableCell>\n                            <TableCell align=\"right\">Nombre</TableCell>\n                            <TableCell align=\"right\">Créditos</TableCell>\n                            <TableCell align=\"right\">Pre-requisitos</TableCell>\n                        </TableRow>\n                    </TableHead>\n                    <TableBody>\n                        {selectedSubjects[pensumCode] &&\n                            cuatri.subjects.map((row) => (\n                                <TableRow\n                                    hover\n                                    key={row.code}\n                                    onClick={() => selectSubject(row)}\n                                    className={\n                                        !prerequisitesMet(\n                                            row,\n                                            selectedSubjects[pensumCode],\n                                            creditsCount,\n                                            totalCredits\n                                        )\n                                            ? \"disabled-row\"\n                                            : \"\"\n                                    }\n                                    selected={selectedSubjects[pensumCode].some(\n                                        (s: any) => s.code === row.code\n                                    )}\n                                >\n                                    <TableCell padding=\"checkbox\">\n                                        <Checkbox\n                                            checked={selectedSubjects[\n                                                pensumCode\n                                            ].some((s) => s.code === row.code)}\n                                            // onChange={(e) => selectSubject(row)}\n                                            disabled={\n                                                !prerequisitesMet(\n                                                    row,\n                                                    selectedSubjects[\n                                                        pensumCode\n                                                    ],\n                                                    creditsCount,\n                                                    totalCredits\n                                                )\n                                            }\n                                        />\n                                    </TableCell>\n                                    <TableCell scope=\"row\">\n                                        {row.code}\n                                    </TableCell>\n                                    <TableCell align=\"right\">\n                                        {row.name}\n                                    </TableCell>\n                                    <TableCell align=\"right\">\n                                        {row.credits}\n                                    </TableCell>\n                                    <TableCell align=\"right\">\n                                        {row.prerequisites.map((pr: any) =>\n                                            pr.includes(\"%\") ? (\n                                                <p key={row.code + pr}>{pr}</p>\n                                            ) : (\n                                                <HtmlTooltip\n                                                    className=\"prerequisite-tooltip\"\n                                                    key={row.code + pr}\n                                                    title={\n                                                        <Typography\n                                                            variant=\"h6\"\n                                                            className=\"prerequisite-tooltip-content\"\n                                                        >\n                                                            {getSubjectNameFromPrereq(\n                                                                pr\n                                                            )}\n                                                        </Typography>\n                                                    }\n                                                >\n                                                    <p>{pr}</p>\n                                                </HtmlTooltip>\n                                            )\n                                        )}\n                                    </TableCell>\n                                </TableRow>\n                            ))}\n                    </TableBody>\n                </Table>\n            </TableContainer>\n        </>\n    );\n};\n","import React from \"react\";\nimport { Grid, Typography, useTheme, useMediaQuery } from \"@material-ui/core\";\nimport { InfoCard } from \"./InfoCard\";\nimport { CuatriTable } from \"./CuatriTable\";\nimport { useSelectedCareer } from \"../contexts/selectedCareer.context\";\nimport { useSelectedSubjects } from \"../contexts/selectedSubjects.context\";\n\nexport const MainContent = (props: any) => {\n    const [selectedSubjects] = useSelectedSubjects();\n    const theme = useTheme();\n    const isMobileScreen = useMediaQuery(theme.breakpoints.down(\"sm\"));\n    const [selectedCareer] = useSelectedCareer();\n\n    return (\n        <React.Fragment>\n            {selectedCareer &&\n            selectedCareer.cuatris &&\n            selectedCareer.cuatris.length > 0 ? (\n                <InfoCard\n                    date={selectedCareer.date}\n                    pensumCode={selectedCareer.pensumCode}\n                    subjectsCount={\n                        selectedSubjects[selectedCareer.pensumCode].length\n                    }\n                    totalSubjects={selectedCareer.cuatris.reduce(\n                        (acc, subject) => acc + subject.subjects.length,\n                        0\n                    )}\n                    creditsCount={selectedSubjects[\n                        selectedCareer.pensumCode\n                    ].reduce((acc, subject) => acc + subject.credits, 0)}\n                    totalCredits={selectedCareer.cuatris.reduce(\n                        (acc, cuatri) =>\n                            acc +\n                            cuatri.subjects.reduce(\n                                (acc2, subject) => acc2 + subject.credits,\n                                0\n                            ),\n                        0\n                    )}\n                />\n            ) : (\n                <>\n                    <Typography variant=\"h1\" className=\"main-title\">\n                        <span role=\"img\" aria-label=\"arriba\">\n                            👆\n                        </span>\n                    </Typography>\n                    <Typography\n                        variant={isMobileScreen ? \"h2\" : \"h1\"}\n                        className=\"main-title\"\n                    >\n                        Selecciona una carrera del dropdown arriba{\" \"}\n                    </Typography>\n                </>\n            )}\n\n            <Grid container spacing={2} style={{ flexGrow: 1 }}>\n                {selectedCareer &&\n                    selectedCareer.cuatris &&\n                    selectedCareer.cuatris.length > 0 &&\n                    selectedCareer.cuatris.map((cuatri) => (\n                        <Grid item xs={12} md={6} key={cuatri.period}>\n                            <CuatriTable\n                                cuatri={cuatri}\n                                cuatris={selectedCareer.cuatris}\n                                pensumCode={selectedCareer.pensumCode}\n                                creditsCount={selectedSubjects[\n                                    selectedCareer.pensumCode\n                                ].reduce((acc, item) => acc + item.credits, 0)}\n                                totalCredits={selectedCareer.cuatris.reduce(\n                                    (acc, cuatri) =>\n                                        acc +\n                                        cuatri.subjects.reduce(\n                                            (acc2, subject) =>\n                                                acc2 + subject.credits,\n                                            0\n                                        ),\n                                    0\n                                )}\n                            />\n                        </Grid>\n                    ))}\n            </Grid>\n        </React.Fragment>\n    );\n};\n","import React from \"react\";\nimport { makeStyles } from \"@material-ui/core/styles\";\nimport useScrollTrigger from \"@material-ui/core/useScrollTrigger\";\nimport Fab from \"@material-ui/core/Fab\";\nimport { ArrowUp as ArrowUpIcon } from \"mdi-material-ui\";\nimport Zoom from \"@material-ui/core/Zoom\";\n\nconst useStyles = makeStyles((theme) => ({\n    root: {\n        position: \"fixed\",\n        bottom: theme.spacing(2),\n        right: theme.spacing(2),\n    },\n}));\n\nfunction ScrollTop(props: any) {\n    const { children, window } = props;\n    const classes = useStyles();\n    // Note that you normally won't need to set the window ref as useScrollTrigger\n    // will default to window.\n    // This is only being set here because the demo is in an iframe.\n    const trigger = useScrollTrigger({\n        target: window ? window() : undefined,\n        disableHysteresis: true,\n        threshold: 100,\n    });\n\n    const handleClick = (event: any) => {\n        const anchor = (event.target.ownerDocument || document).querySelector(\n            \"#back-to-top-anchor\"\n        );\n\n        if (anchor) {\n            anchor.scrollIntoView({ behavior: \"smooth\", block: \"center\" });\n        }\n    };\n\n    return (\n        <Zoom in={trigger}>\n            <div\n                onClick={handleClick}\n                role=\"presentation\"\n                className={classes.root}\n            >\n                {children}\n            </div>\n        </Zoom>\n    );\n}\n\nexport default function BackToTop(props: any) {\n    return (\n        <React.Fragment>\n            <ScrollTop {...props}>\n                <Fab\n                    color=\"secondary\"\n                    size=\"small\"\n                    aria-label=\"scroll back to top\"\n                >\n                    <ArrowUpIcon />\n                </Fab>\n            </ScrollTop>\n        </React.Fragment>\n    );\n}\n","import React from \"react\";\nimport { Container, createMuiTheme, ThemeProvider } from \"@material-ui/core\";\nimport \"./App.css\";\nimport pensumsJson from \"./pensums.json\";\nimport { Footer } from \"./components/Footer\";\nimport { Navbar } from \"./components/Navbar\";\nimport { MainContent } from \"./components/MainContent\";\nimport { Pensum } from \"./interfaces/pensums.interface\";\nimport BackToTop from \"./components/BackToTop\";\nimport { SelectedCareerProvider } from \"./contexts/selectedCareer.context\";\nimport { SelectedSubjectsProvider } from \"./contexts/selectedSubjects.context\";\nimport { ImportExportProvider } from \"./contexts/importExportContext\";\n\nfunction App() {\n    const pensums: Pensum[] = pensumsJson;\n\n    const darkTheme = createMuiTheme({\n        palette: {\n            type: \"dark\",\n        },\n    });\n\n    return (\n        <React.Fragment>\n            <ThemeProvider theme={darkTheme}>\n                <SelectedCareerProvider>\n                    <ImportExportProvider>\n                        <Navbar pensums={pensums} />\n\n                        <Container fixed className=\"App\">\n                            <SelectedSubjectsProvider>\n                                <MainContent />\n                            </SelectedSubjectsProvider>\n\n                            <Footer />\n                        </Container>\n                    </ImportExportProvider>\n                </SelectedCareerProvider>\n\n                <BackToTop />\n            </ThemeProvider>\n        </React.Fragment>\n    );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(\n    <React.StrictMode>\n        <App />\n    </React.StrictMode>,\n    document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}